{
  "hash": "d374928c6e28becdeec110546a7b6a87",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Grammar of data visualization\"\nsubtitle: \"Lecture 2\"\ndate: \"2025-01-16\"\nformat: \n  revealjs:\n    output-file: 02-data-grammar-slides.html\nauto-stretch: false\n---\n\n## Reminders {.smaller}\n\n-   I have office hours today!\n    1:00-3:00 PM in Old Chemistry 203/203B.\n\n-   We will start grading your ae repositories next week - make sure you have them ready to go.\n\n-   First 'real' lab is on Monday; the topic will be data visualization (what we are starting today).\n\n## Outline {.smaller}\n\n-   Last time:\n\n    -   We introduced you to the course toolkit.\n\n    -   You **cloned** your `ae` repositories and started making some updates in your Quarto documents.\n\n    -   You **commited and pushed** your changes back.\n\n. . .\n\n-   Today:\n\n    -   We will introduce data visualization.\n\n    -   You will **pull** to get today's application exercise file.\n\n    -   You will work on the new application exercise on data visualization, **commit** your changes, and **push** them.\n\n# From last time\n\n## `ae-01-meet-the-penguins`\n\n::: appex\nGo to RStudio, confirm that you're in the `ae` project, and open the document `ae-01-meet-the-penguins.qmd`.\n:::\n\n## Common problems: {.smaller}\n\n-   The environment used by Quarto ***when rendering*** starts EMPTY - it does *not see* what *you see* in your environment.\\\n\n-   Using functions that cause a popup (like `View()` ) are *not going to work* when you render a document.\n    Either use a comment (with `#`) to remove them, or just delete before rendering!\\\n\n-   Make sure you commit and then PUSH!\n    Just committing is not enough!\n\n# Data visualization\n\n## Thoughts on this plot?\n\n![](images/02/female-heights.png){fig-align=\"center\"}\n\n## More Penguins {.smaller}\n\n![](images/02/peng_plot.png){fig-align=\"center\"}\n\n## Start plotting! {.smaller}\n\nHow can you create something like this???\n\n::: columns\n::: {.column width=\"30%\"}\n![](images/02/ggplot.png)\n:::\n\n::: {.column width=\"70%\"}\n-   The [**ggplot2**](https://ggplot2.tidyverse.org) package has the plotting functions you need!\n\n-   **ggplot2** is a part of the **tidyverse** package - when you load tidyverse, you also load **ggplot2**\n:::\n:::\n\n## Load Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(ggthemes)\n```\n:::\n\n\n## Look at the data\n\n![](images/df.png){fig-align=\"center\"}\n\n## Visualize the data\n\nWhat are some steps you can take to visualize a data set?\n\n-   What do you want on the x-axis?\n\n-   What do you want on the y-axis?\n\n## Step 1. Prepare a canvas for plotting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins)\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-2-1.png){width=864}\n:::\n:::\n\n\n## Step 2. Map variables to aesthetics {.smaller}\n\n*Map* `year` to the `x` *aesthetic*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, mapping = aes(x = bill_length_mm))\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-3-1.png){width=864}\n:::\n:::\n\n\n## Step 3. Map variables to aesthetics {.smaller}\n\n*Map* `percent_yes` to the `y` *aesthetic*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, mapping = aes(x = bill_length_mm, y = body_mass_g))\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-4-1.png){width=864}\n:::\n:::\n\n\n## Argument names {.smaller}\n\nIt's common practice in R to omit the names of first two arguments of a function:\n\n. . .\n\n-   Instead of\n\n``` r\nggplot(data = your_data, mapping = aes(x = x_variable, y = y_variable))\n```\n\n-   Use\n\n``` r\nggplot(your_data, aes(x = x_variable, y = y_variable))\n```\n\n## Step 3. Map variables to aesthetics {.smaller}\n\n*Map* `percent_yes` to the `y` *aesthetic*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, mapping = aes(x = bill_length_mm, y = body_mass_g))\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-5-1.png){width=864}\n:::\n:::\n\n\n## Step 3. Map variables to aesthetics {.smaller}\n\n*Map* `percent_yes` to the `y` *aesthetic*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = bill_length_mm, y = body_mass_g))\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-6-1.png){width=864}\n:::\n:::\n\n\n## Step 4. Represent data on your canvas {.smaller}\n\nwith a `geom`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale\nrange (`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-7-1.png){width=864}\n:::\n:::\n\n\n## Step 4. Represent data on your canvas {.smaller}\n\n-   Adding `geom_point()` resulted in the following warning:\n\n```         \nWarning: Removed 2 rows containing missing values or values outside the scale\nrange (`geom_point()`)\n```\n\n## Step 4. Represent data on your canvas {.smaller}\n\nwith a `geom`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-8-1.png){width=864}\n:::\n:::\n\n\n## Step 5. Map variables to aesthetics {.smaller}\n\n*Map* `species` to the `color` *aesthetic*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-9-1.png){width=864}\n:::\n:::\n\n\n## Step 5. Map variables to aesthetics {.smaller}\n\n*Map* `species` to the `color` *aesthetic*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-10-1.png){width=864}\n:::\n:::\n\n\n***What exactly are aesthetics?*** They map from a variable to a plot feature.\n\n-   x and y axes\n\n-   color, shape, size of points\n\n## Step 6. Represent data on your canvas{.smaller}\n\nwith another `geom`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale\nrange (`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-11-1.png){width=864}\n:::\n:::\n\n\n## Warnings and messages {.smaller}\n\n-   Adding `geom_smooth()` resulted in the following warning:\n\n```         \n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n. . .\n\n-   It tells us the type of smoothing ggplot2 does under the hood when drawing the smooth curves that represent trends for each species.\n\n. . .\n\n-   Going forward we'll suppress this warning to save some space.\n\n## Step 6. Represent data on your canvas {.smaller}\n\nwith another `geom`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +\n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-12-1.png){width=864}\n:::\n:::\n\n\n## Step 7. Split plot into facets {.smaller}\n\nUse `facet_wrap` to make sub-plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +\n  geom_smooth() +\n  facet_wrap(~island)\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-13-1.png){width=864}\n:::\n:::\n\n\n## Step 7. Split plot into facets {.smaller}\n\nWe can facet by other variables!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +\n  geom_smooth() +\n  facet_wrap(~species)\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-14-1.png){width=864}\n:::\n:::\n\n\n## A note on facets: {.smaller}\n\nWhich plot do you think made it easier to compare between penguin species?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +\n  geom_smooth() \n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-15-1.png){width=864}\n:::\n:::\n\n\n## Step 8. Use a different color scale {.smaller}\n\nWith a `scale_color_` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +\n  geom_smooth() +\n  scale_color_grey() \n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-16-1.png){width=864}\n:::\n:::\n\n\n## Step 8. Use a different color scale {.smaller}\n\nWith another `scale_color_` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +\n  geom_smooth() +\n  scale_color_colorblind() #this is from ggthemes \n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-17-1.png){width=864}\n:::\n:::\n\n\n## Step 9. Apply a different theme {.smaller}\n\nWith a `theme_` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +\n  geom_smooth() +\n  scale_color_colorblind() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-18-1.png){width=864}\n:::\n:::\n\n\n## Step 9. Apply a different theme {.smaller}\n\nWith a `theme_` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +\n  geom_smooth() +\n  scale_color_colorblind() +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-19-1.png){width=864}\n:::\n:::\n\n\n## Step 9. Apply a different theme {.smaller}\n\nWith a `theme_` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +\n  geom_smooth() +\n  scale_color_colorblind() +\n  theme_solarized() #this is from ggthemes\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-20-1.png){width=864}\n:::\n:::\n\n\n## Step 9. Apply a different theme {.smaller}\n\nWith a `theme_` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +\n  geom_smooth() +\n  scale_color_colorblind() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-21-1.png){width=864}\n:::\n:::\n\n\n## Step 10. Add labels {.smaller}\n\nWith `labs()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +\n  geom_smooth() +\n  scale_color_colorblind() +\n  theme_minimal() +\n  labs(x = \"Bill Length (mm)\", y = \"Body Mass (g)\", color = \"Species\", title = \"Penguin Body Mass vs. Bill Length\")\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-22-1.png){width=864}\n:::\n:::\n\n\n## Step 11. Set transparency of points {.smaller}\n\nwith `alpha`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point(alpha = 0.1) +\n  geom_smooth() +\n  scale_color_colorblind() +\n  theme_minimal() +\n  labs(x = \"Bill Length (mm)\", y = \"Body Mass (g)\", color = \"Species\")\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-23-1.png){width=864}\n:::\n:::\n\n\n## Step 11. Set transparency of points {.smaller}\n\nwith `alpha`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point(alpha = 0.7) +\n  geom_smooth() +\n  scale_color_colorblind() +\n  theme_minimal() +\n  labs(x = \"Bill Length (mm)\", y = \"Body Mass (g)\", color = \"Species\")\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-24-1.png){width=864}\n:::\n:::\n\n\n## Step 12. Hide standard errors of curves {.smaller}\n\nwith `se = FALSE`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(se = FALSE) +\n  scale_color_colorblind() +\n  theme_minimal() +\n  labs(x = \"Bill Length (mm)\", y = \"Body Mass (g)\", color = \"Species\")\n```\n\n::: {.cell-output-display}\n![](02-data-grammar_files/figure-html/unnamed-chunk-25-1.png){width=864}\n:::\n:::\n\n\n## How am I supposed to remember all of this?! {.smaller}\n\n***You aren't!!!***\n\n::: incremental\n-   It's important to (eventually) know and remember the key ideas: what does changing a theme do? What are aesthetics? What is a geom?\n-   You do *not* need to memorize a comprehensive list of *all* of the different geoms, themes, color scales, etc.\n-   There will be a few fundamentals we expect you to know -- more on that later!\n-   <https://ggplot2.tidyverse.org> is super helpful!\n:::\n\n## Grammar of graphics {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\nWe built a plot layer-by-layer\n\n-   just like described in the book *The Grammar of Graphics* and\n-   implemented in the **ggplot2** package, the data visualization package of the tidyverse.\n:::\n\n::: {.column width=\"20%\"}\n![](images/02/gg-book.png)\n:::\n\n::: {.column width=\"30%\"}\n![](images/02/gg-layers.png)\n:::\n:::\n\n# Application exercise\n\n## Application exercise {.smaller}\n\nWhat if we want to use our own data?\n\n<br>\n\n`read_csv(\"data_file.csv\")` (assuming the data is in a CSV format)\n\n## `ae-02-bechdel-dataviz` {.smaller}\n\nWe will be looking at data on movies and the Bechdel test.\n\n## `ae-02-bechdel-dataviz` {.smaller}\n\n::: appex\n-   Go to your `ae` project in RStudio.\n-   Make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.\n-   If you haven't yet done so, click **Pull** to get today's application exercise file.\n-   Work through the application exercise in class, and **render, commit, and push** your edits by the end of class.\n:::\n\n## Recap {.smaller}\n\n-   Construct plots with `ggplot()`.\n-   Layers of ggplots are separated by `+`s.\n-   The formula is (almost) always as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(DATA, aes(x = X-VAR, y = Y-VAR, ...)) +\n  geom_XXX() \n```\n:::\n\n\n## Coming Up... {.smaller}\n\n-   What are some other types of plots you can make?\n\n-   How can you talk about the information conveyed by plots?\n",
    "supporting": [
      "02-data-grammar_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}