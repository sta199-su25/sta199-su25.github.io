{
  "hash": "6ad98d86241eb782b9feea4ba997ff42",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Joining\"\nsubtitle: \"Lecture 7\"\ndate: \"2025-05-23\"\nformat: \n  revealjs:\n    output-file: 07-joining-data-slides.html\nauto-stretch: false\n---\n\n## Announcements/Reminders {.smaller}\n\n-   Office hours are today from **1:00-3:00** on **Zoom**\n\n-   AE04... that was a lot\n\n    -   The first 3 parts that we did in class are what are important!\n\n    -   The rest is a good exercise in data vis.\n\n-   Questions about lab?\n\n## Outline {.smaller}\n\n-   ***Last Time:*** Started learning about data transformation!\n\n-   ***Today:***\n\n    -   Review from last time\n\n    -   Joining data (working with multiple data frames)\n\n\n::: {.cell}\n\n:::\n\n\n## Review: Pivot Longer {.smaller}\n\n::: columns\n::: {.column .fragment width=\"65%\"}\n> How do we go from this...\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 6\n  degree `2011` `2012` `2013` `2014` `2015`\n  <fct>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 AB2        NA      1     NA     NA      4\n2 AB          2      2      4      1      3\n3 BS2         2      6      1     NA      5\n4 BS          5      9      4     13     10\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column .fragment width=\"29%\"}\n> ...to this?\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 56 × 3\n  degree  year     n\n  <fct>  <dbl> <dbl>\n1 AB2     2011    NA\n2 AB2     2012     1\n3 AB2     2013    NA\n4 AB2     2014    NA\n5 AB2     2015     4\n# ℹ 51 more rows\n```\n\n\n:::\n:::\n\n:::\n:::\n\n## Reverse It: Pivot Wider {.smaller}\n\n::: columns\n::: {.column .fragment width=\"65%\"}\n> How do we get back to this...\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 6\n  degree `2011` `2012` `2013` `2014` `2015`\n  <fct>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 AB2        NA      1     NA     NA      4\n2 AB          2      2      4      1      3\n3 BS2         2      6      1     NA      5\n4 BS          5      9      4     13     10\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column .fragment width=\"29%\"}\n> ... from this?\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 56 × 3\n  degree  year     n\n  <fct>  <dbl> <dbl>\n1 AB2     2011    NA\n2 AB2     2012     1\n3 AB2     2013    NA\n4 AB2     2014    NA\n5 AB2     2015     4\n# ℹ 51 more rows\n```\n\n\n:::\n:::\n\n:::\n:::\n\n## Recap: Pivot Functions {.smaller}\n\n::: columns\n::: {.column .fragment width=\"50%\"}\n> Pivot longer...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_set |>\n  pivot_longer(\n    cols = colums_to_move,\n    names_to = \"var_for_column_names\", \n    values_to = \"var_for_values\"\n  )\n```\n:::\n\n:::\n\n::: {.column .fragment width=\"50%\"}\n> ... or wider\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_set |>\n  pivot_wider( \n    names_from = var_with_cols, \n    values_to = var_with_vals\n  )\n```\n:::\n\n:::\n:::\n\n# Joining Data\n\n## Joining Data\n\nWhat happens if we want information from two different data sets?\n\n## Joining Data: Sample Scenario{.smaller}\n\n::: columns\n::: {.column  width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 217 × 3\n   country              year population\n   <chr>               <dbl>      <dbl>\n 1 Afghanistan          2022    41129. \n 2 Albania              2022     2778. \n 3 Algeria              2022    44903. \n 4 American Samoa       2022       44.3\n 5 Andorra              2022       79.8\n 6 Angola               2022    35589. \n 7 Antigua and Barbuda  2022       93.8\n 8 Argentina            2022    46235. \n 9 Armenia              2022     2780. \n10 Aruba                2022      106. \n# ℹ 207 more rows\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n-  We want to know about population in different continents.\n\n-  We could use mutate to create a continent variable, but that would be terrible....\n:::\n\n:::\n\n## Joining Data: Sample Scenario{.smaller}\n\n::: columns\n::: {.column  width=\"44%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 217 × 3\n   country              year population\n   <chr>               <dbl>      <dbl>\n 1 Afghanistan          2022    41129. \n 2 Albania              2022     2778. \n 3 Algeria              2022    44903. \n 4 American Samoa       2022       44.3\n 5 Andorra              2022       79.8\n 6 Angola               2022    35589. \n 7 Antigua and Barbuda  2022       93.8\n 8 Argentina            2022    46235. \n 9 Armenia              2022     2780. \n10 Aruba                2022      106. \n# ℹ 207 more rows\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"56%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinent\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 285 × 4\n   entity                code      year continent    \n   <chr>                 <chr>    <dbl> <chr>        \n 1 Abkhazia              OWID_ABK  2015 Asia         \n 2 Afghanistan           AFG       2015 Asia         \n 3 Akrotiri and Dhekelia OWID_AKD  2015 Asia         \n 4 Aland Islands         ALA       2015 Europe       \n 5 Albania               ALB       2015 Europe       \n 6 Algeria               DZA       2015 Africa       \n 7 American Samoa        ASM       2015 Oceania      \n 8 Andorra               AND       2015 Europe       \n 9 Angola                AGO       2015 Africa       \n10 Anguilla              AIA       2015 North America\n# ℹ 275 more rows\n```\n\n\n:::\n:::\n\n:::\n\n:::\n\n\n\n## Joining: Example Data\n\n::: columns\n::: {.column .fragment width=\"25%\"}\n> df_X\n\n| id  | X   |\n|-----|-----|\n| 1   | X1  |\n| 2   | X2  |\n| 3   | X3  |\n:::\n\n::: {.column .fragment width=\"25%\"}\n> df_Y\n\n| id  | Y   |\n|-----|-----|\n| 1   | Y1  |\n| 2   | Y2  |\n| 4   | Y4  |\n:::\n\n::: {.column .fragment width=\"50%\"}\n![](images/venn-1-empty.png)\n:::\n:::\n\n## Joining: Left Join\n\n::: columns\n::: {.column .fragment width=\"25%\"}\n> df_X\n\n| id  | X   |\n|-----|-----|\n| 1   | X1  |\n| 2   | X2  |\n| 3   | X3  |\n:::\n\n::: {.column .fragment width=\"25%\"}\n> df_Y\n\n| id  | Y   |\n|-----|-----|\n| 1   | Y1  |\n| 2   | Y2  |\n| 4   | Y4  |\n:::\n\n::: {.column .fragment width=\"50%\"}\n> left_join(df_X, df_Y)\n\n| id  | X   | Y    |\n|-----|-----|------|\n| 1   | X1  | Y1   |\n| 2   | X2  | Y2   |\n| 3   | X3  | *NA* |\n:::\n:::\n\n## Joining: Left Join\n\n::: columns\n::: {.column width=\"25%\"}\n> df_X\n\n| id  | X   |\n|-----|-----|\n| 1   | X1  |\n| 2   | X2  |\n| 3   | X3  |\n:::\n\n::: {.column width=\"25%\"}\n> df_Y\n\n| id  | Y   |\n|-----|-----|\n| 1   | Y1  |\n| 2   | Y2  |\n| 4   | Y4  |\n:::\n\n::: {.column width=\"50%\"}\n> left_join(df_X, df_Y)\n\n| id  | X   | Y    |\n|-----|-----|------|\n| 1   | X1  | Y1   |\n| 2   | X2  | Y2   |\n| 3   | X3  | *NA* |\n:::\n:::\n\n<!-- small Venn diagram in the bottom-right -->\n<div style=\"\n  position: absolute;\n  bottom: 80px;\n  right: -90px;\n  width: 280px;           /* adjust to taste */\n  pointer-events: none;  /* so it never steals clicks */\n\">\n  <img src=\"images/venn-1.png\" style=\"width: 100%; height: auto;\" />\n</div>\n\n\n## Joining: Right Join\n\n::: columns\n::: {.column .fragment width=\"25%\"}\n> df_X\n\n| id  | X   |\n|-----|-----|\n| 1   | X1  |\n| 2   | X2  |\n| 3   | X3  |\n:::\n\n::: {.column .fragment width=\"25%\"}\n> df_Y\n\n| id  | Y   |\n|-----|-----|\n| 1   | Y1  |\n| 2   | Y2  |\n| 4   | Y4  |\n:::\n\n::: {.column .fragment width=\"50%\"}\n> right_join(df_X, df_Y)\n\n| id  | X    | Y   |\n|-----|------|-----|\n| 1   | X1   | Y1  |\n| 2   | X2   | Y2  |\n| 4   | *NA* | Y4  |\n:::\n:::\n\n## Joining: Right Join\n\n::: columns\n::: {.column width=\"25%\"}\n> df_X\n\n| id  | X   |\n|-----|-----|\n| 1   | X1  |\n| 2   | X2  |\n| 3   | X3  |\n:::\n\n::: {.column  width=\"25%\"}\n> df_Y\n\n| id  | Y   |\n|-----|-----|\n| 1   | Y1  |\n| 2   | Y2  |\n| 4   | Y4  |\n:::\n\n::: {.column width=\"50%\"}\n> right_join(df_X, df_Y)\n\n| id  | X    | Y   |\n|-----|------|-----|\n| 1   | X1   | Y1  |\n| 2   | X2   | Y2  |\n| 4   | *NA* | Y4  |\n:::\n:::\n\n<!-- small Venn diagram in the bottom-right -->\n<div style=\"\n  position: absolute;\n  bottom: 80px;\n  right: -90px;\n  width: 280px;           /* adjust to taste */\n  pointer-events: none;  /* so it never steals clicks */\n\">\n  <img src=\"images/venn-1.png\" style=\"width: 100%; height: auto;\" />\n</div>\n\n## Joining: Inner Join\n\n::: columns\n::: {.column .fragment width=\"25%\"}\n> df_X\n\n| id  | X   |\n|-----|-----|\n| 1   | X1  |\n| 2   | X2  |\n| 3   | X3  |\n:::\n\n::: {.column .fragment width=\"25%\"}\n> df_Y\n\n| id  | Y   |\n|-----|-----|\n| 1   | Y1  |\n| 2   | Y2  |\n| 4   | Y4  |\n:::\n\n::: {.column .fragment width=\"50%\"}\n> inner_join(df_X, df_Y)\n\n| id  | X   | Y   |\n|-----|-----|-----|\n| 1   | X1  | Y1  |\n| 2   | X2  | Y2  |\n:::\n:::\n\n## Joining: Inner Join\n\n::: columns\n::: {.column width=\"25%\"}\n> df_X\n\n| id  | X   |\n|-----|-----|\n| 1   | X1  |\n| 2   | X2  |\n| 3   | X3  |\n:::\n\n::: {.column width=\"25%\"}\n> df_Y\n\n| id  | Y   |\n|-----|-----|\n| 1   | Y1  |\n| 2   | Y2  |\n| 4   | Y4  |\n:::\n\n::: {.column width=\"50%\"}\n> inner_join(df_X, df_Y)\n\n| id  | X   | Y   |\n|-----|-----|-----|\n| 1   | X1  | Y1  |\n| 2   | X2  | Y2  |\n:::\n:::\n\n<!-- small Venn diagram in the bottom-right -->\n<div style=\"\n  position: absolute;\n  bottom: 80px;\n  right: -90px;\n  width: 280px;           /* adjust to taste */\n  pointer-events: none;  /* so it never steals clicks */\n\">\n  <img src=\"images/venn-1.png\" style=\"width: 100%; height: auto;\" />\n</div>\n\n## Joining: Semi Join\n\n::: columns\n::: {.column .fragment width=\"25%\"}\n> df_X\n\n| id  | X   |\n|-----|-----|\n| 1   | X1  |\n| 2   | X2  |\n| 3   | X3  |\n:::\n\n::: {.column .fragment width=\"25%\"}\n> df_Y\n\n| id  | Y   |\n|-----|-----|\n| 1   | Y1  |\n| 2   | Y2  |\n| 4   | Y4  |\n:::\n\n::: {.column .fragment width=\"50%\"}\n> semi_join(df_X, df_Y)\n\n| id  | X   |\n|-----|-----|\n| 1   | X1  |\n| 2   | X2  |\n:::\n\n:::\n\n## Joining: Semi Join\n\n::: columns\n::: {.column width=\"25%\"}\n> df_X\n\n| id  | X   |\n|-----|-----|\n| 1   | X1  |\n| 2   | X2  |\n| 3   | X3  |\n:::\n\n::: {.column width=\"25%\"}\n> df_Y\n\n| id  | Y   |\n|-----|-----|\n| 1   | Y1  |\n| 2   | Y2  |\n| 4   | Y4  |\n:::\n\n::: {.column width=\"50%\"}\n> semi_join(df_X, df_Y)\n\n| id  | X   |\n|-----|-----|\n| 1   | X1  |\n| 2   | X2  |\n:::\n:::\n\n<!-- small Venn diagram in the bottom-right -->\n<div style=\"\n  position: absolute;\n  bottom: 80px;\n  right: -90px;\n  width: 280px;           /* adjust to taste */\n  pointer-events: none;  /* so it never steals clicks */\n\">\n  <img src=\"images/venn-1.png\" style=\"width: 100%; height: auto;\" />\n</div>\n\n\n## Joining: Anti Join\n\n::: columns\n::: {.column .fragment width=\"25%\"}\n> df_X\n\n| id  | X   |\n|-----|-----|\n| 1   | X1  |\n| 2   | X2  |\n| 3   | X3  |\n:::\n\n::: {.column .fragment width=\"25%\"}\n> df_Y\n\n| id  | Y   |\n|-----|-----|\n| 1   | Y1  |\n| 2   | Y2  |\n| 4   | Y4  |\n:::\n\n::: {.column .fragment width=\"50%\"}\n> anti_join(df_X, df_Y)\n\n| id  | X   |\n|-----|-----|\n| 3   | X3  |\n:::\n:::\n\n\n## Joining: Anti Join\n\n::: columns\n::: {.column width=\"25%\"}\n> df_X\n\n| id  | X   |\n|-----|-----|\n| 1   | X1  |\n| 2   | X2  |\n| 3   | X3  |\n:::\n\n::: {.column width=\"25%\"}\n> df_Y\n\n| id  | Y   |\n|-----|-----|\n| 1   | Y1  |\n| 2   | Y2  |\n| 4   | Y4  |\n:::\n\n::: {.column width=\"50%\"}\n> anti_join(df_X, df_Y)\n\n|     |     |\n|-----|-----|\n|     |     |\n:::\n:::\n\n<!-- small Venn diagram in the bottom-right -->\n<div style=\"\n  position: absolute;\n  bottom: 80px;\n  right: -90px;\n  width: 280px;           /* adjust to taste */\n  pointer-events: none;  /* so it never steals clicks */\n\">\n  <img src=\"images/venn-1.png\" style=\"width: 100%; height: auto;\" />\n</div>\n\n## Summary of Join Types\n\n![](images/left.png)\n\n## More Notes on Join\n\n-   In the following examples, I use left_join()\n\n-   The same concept holds for other types of joins!\n\n-   *Idea: how do we specify which columns we want to join with?*\n\n## Join: Which columns? {.smaller}\n\nHow can I specify which column to join by?\n\n::: columns\n::: {.column .fragment width=\"25%\"}\n> df_X\n\n| id_X | X   |\n|------|-----|\n| 1    | X1  |\n| 2    | X2  |\n| 3    | X3  |\n:::\n\n::: {.column .fragment width=\"25%\"}\n> df_Y\n\n| id_Y | Y   |\n|------|-----|\n| 1    | Y1  |\n| 2    | Y2  |\n| 4    | Y4  |\n:::\n\n::: {.column .fragment width=\"50%\"}\n> goal: left join\n\n| id_X | X   | Y    |\n|------|-----|------|\n| 1    | X1  | Y1   |\n| 2    | X2  | Y2   |\n| 3    | X3  | *NA* |\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(df_X, df_Y, \n          by = join_by(id_X == id_Y))\n```\n:::\n\n:::\n:::\n\n## What about the pipe? {.smaller}\n\nThe following two pieces of code are equivalent:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(df_X, df_Y, \n          by = join_by(id_X == id_Y))\n```\n:::\n\n\n<br> <br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_X |> left_join(df_Y, \n                  by = join_by(id_X == id_Y))\n```\n:::\n\n\n## Let's save!\n\nMost often, you will want to save the result of a join to a new data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_X_Y <- df_X |> left_join(df_Y, \n                            by = join_by(id_X == id_Y))\n```\n:::\n\n\n# Your Turn\n\n## What is the result?\n\n\n# AE 07\n\nGoal: Do a join!!!\n\n## Data {.smaller}\n\n::: columns\n::: {.column  width=\"44%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 217 × 3\n   country              year population\n   <chr>               <dbl>      <dbl>\n 1 Afghanistan          2022    41129. \n 2 Albania              2022     2778. \n 3 Algeria              2022    44903. \n 4 American Samoa       2022       44.3\n 5 Andorra              2022       79.8\n 6 Angola               2022    35589. \n 7 Antigua and Barbuda  2022       93.8\n 8 Argentina            2022    46235. \n 9 Armenia              2022     2780. \n10 Aruba                2022      106. \n# ℹ 207 more rows\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"56%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinent\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 285 × 4\n   entity                code      year continent    \n   <chr>                 <chr>    <dbl> <chr>        \n 1 Abkhazia              OWID_ABK  2015 Asia         \n 2 Afghanistan           AFG       2015 Asia         \n 3 Akrotiri and Dhekelia OWID_AKD  2015 Asia         \n 4 Aland Islands         ALA       2015 Europe       \n 5 Albania               ALB       2015 Europe       \n 6 Algeria               DZA       2015 Africa       \n 7 American Samoa        ASM       2015 Oceania      \n 8 Andorra               AND       2015 Europe       \n 9 Angola                AGO       2015 Africa       \n10 Anguilla              AIA       2015 North America\n# ℹ 275 more rows\n```\n\n\n:::\n:::\n\n:::\n\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}