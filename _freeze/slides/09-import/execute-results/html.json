{
  "hash": "0bb08f27a58066c3651597bf574775b2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Importing\"\nsubtitle: \"Lecture 9\"\ndate: \"2025-05-28\"\nformat: \n  revealjs:\n    output-file: 09-import-slides.html\nauto-stretch: false\n---\n\n\n\n# Midterm Upcoming\n\n-   Practice + some review + many more details tomorrow in class\n\n-   Initial practice questions are posted!\n\n# Lab Check In\n\n## Lab 1 Grades {.smaller}\n\n-   Please read comments on ALL questions.\n    Some mistakes we did not penalize for, but could in future problems.\n\n-   In the first few questions, the point adjustment feature was used for partial credit.\n\n-   Regrade requests: submit within a week if you believe a grading mistake was made.\n\n-   **Code style** was the biggest common issue.\n\n    -   Even though most questions had code style points, we did not double penalize on *this lab.*\n\n    -   There were some minor problems we did not take off for *this time* but left comments about.\n\n## Code Style {.smaller}\n\n-   spaces before and line breaks after each `+` when building a `ggplot`,\n\n-   spaces before and line breaks after each `|>` in a data transformation pipeline,\n\n-   code should be properly indented\n\n    -   this should match the automatic indentation when you hit enter\n\n    -   to fix: highlight code, click `code` option on top of RStudio, select `reindent lines`\n\n-   there should be spaces around `=` signs and spaces after commas\n\n-   use `|>` and not `%>%`\n\n-   use `<-` and not `=` for saving a data frame\n\n## Lab 2 clarifications {.smaller}\n\n-   Question 7c: No code needed!\n    Use results 7a and 7b to answer.\n    You can delete the code chunk from the template!\n\n-   Question 10b: 'filter your reshaped dataset from question 10' should be from question 9\n\n-   Question 2c: 'How is the output different from the one in part (a)?'\n    should say from part (b)\n\n## Lab 2 Workflow question {.smaller}\n\n-   **Select pages on gradescope** when you submit\n\n-   **At least three commits** to your lab 2 repo\n\nThese should hopefully be free points!!!\n\n## Lab 2 Question 5 {.smaller}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](09-import_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n*What is a 'typical value' of population density?*\n\n## Lab 2 Question 5 {.smaller}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](09-import_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n   mean   med\n  <dbl> <dbl>\n1 3098. 1156.\n```\n\n\n:::\n:::\n\n\n# Let's zoom out for a second\n\n## Data science and statistical thinking\n\nBefore Midterm 1...\n\n-   **Data science**: the real-world *art* of transforming messy, imperfect, incomplete data into knowledge;\n\nAfter Midterm 1...\n\n-   **Statistics**: the mathematical discipline of quantifying our uncertainty about that knowledge.\n\n## Data science {.medium}\n\n![](images/data-science-cycle/data-science-cycle.001.png){fig-align=\"center\"}\n\n## Data science {.smaller}\n\n::: {style=\"background-color:#f3e8ff; border-left:4px solid #d8b4fe; padding:0.5em 1em; border-radius:4px; display:inline-block\"}\n::: incremental\n1.  **Collection**: we won't seriously study this; data importing coming today\n\n-   **for us**: package data (`library()`), **data importing** (`read_csv`), and webscraping (eventually)\\\n-   **but really**: domain-specific issues of measurement, survey design, experimental design, etc\\\n:::\n:::\n\n## Data science {.smaller}\n\n1.  **Collection**: we won't seriously study this; data importing coming today\n\n::: incremental\n::: {.fragment style=\"background-color:#f3e8ff; border-left:4px solid #d8b4fe; padding:0.5em 1em; border-radius:4px; display:inline-block\"}\n2.  **Preparation**: cleaning, wrangling, and otherwise *tidying* the data so we can actually work with it.\n\n-   **keywords**: `mutate`, `fct_relevel`, `pivot_*`, `*_join`\n:::\n:::\n\n## Data science {.smaller}\n\n1.  **Collection**: we won't seriously study this; data importing coming today\n2.  **Preparation**: cleaning, wrangling, and otherwise *tidying* the data so we can actually work with it.\n\n::: incremental\n::: {.fragment style=\"background-color:#f3e8ff; border-left:4px solid #d8b4fe; padding:0.5em 1em; border-radius:4px; display:inline-block\"}\n3.  **Analysis**: finally transform the data into *knowledge*...\n\n-   **pictures**: `ggplot`, `geom_*`, etc\\\n-   **numerical summaries**: `summarize`, `group_by`, `count`, `mean`, `median`, `sd`, `quantile`, `IQR`, `cor`, etc\\\n-   The pictures and the summaries need to work together!\n:::\n:::\n\n# Reading data into R\n\n## Package data {.smaller}\n\n-   When data is in a pack, such as **tidyverse**, loading the pacakge gets our dataset\n\n-   Most often, this is not the case\n\n## Reading in rectangular data {.smaller}\n\n![](images/excel.png){fig-align=\"center\" width=\"923\"}\n\n## Reading rectangular data {.smaller}\n\n-   Using [**readr**](https://readr.tidyverse.org/): (in **tidyverse)**\n    -   Most commonly: `read_csv()` - file saved as `.csv`\n    -   Maybe also: `read_tsv()`, `read_delim()`, etc - other file formats\n\n. . .\n\n-   Using [**readxl**](https://readxl.tidyverse.org/): `read_excel()` - .xls or .xlsx\n\n. . .\n\n-   Using [**googlesheets4**](https://googlesheets4.tidyverse.org/): `read_sheet()` -- We haven't covered this in the videos, but might be useful for your projects\n\n## Using read_csv() {.smaller}\n\nGenerally, the format is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_df_name <- read_csv(\"path_to_file_name.csv\")\n```\n:::\n\n\n## Path to file {.smaller}\n\n*Where is durham-climate.csv?*\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/ae_repo.png){width=\"300\"}\n:::\n\n::: {.column width=\"50%\"}\n![](images/data_folder.png){width=\"400\"}\n:::\n:::\n\n-   use `/` to separate folder(s) + file names; file path in quotes\n\n-   Answer:\n\n## Why not include `ae-mneubrander`? {.smaller}\n\n*Where is durham-climate.csv?*\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/ae_repo.png){width=\"300\"}\n:::\n\n::: {.column width=\"50%\"}\n![](images/data_folder.png){width=\"400\"} ![](images/getwd.png){width=\"400\"}\n:::\n:::\n\n## We can also write files! {.smaller}\n\nThis allows us to save data for later usage, sharing outside of R, etc.\n\n<br>\n\nUsing `write_csv()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(r_df_name, \"path_to_file.csv\")\n```\n:::\n\n\n# Application exercise\n\n## Goal 1.1: Reading and writing CSV files {.smaller}\n\n-   Read a CSV file with tidy data\n\n-   Split it into subsets based on features of the data\n\n-   Write out subsets as CSV files\n\n## Goal 1.2: Practice - Case When {.smaller}\n\n-   `case_when()` is similar to `if_else()`, but allows multiple cases\n-   `case_when()` is often used in `mutate()` to make a new column\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  mutate(new_var = case_when(\n    condition_1 ~ result_1,\n    condition_2 ~ result_2,\n    condition_3 ~ result_3,\n    ...,\n    .default = default_result\n  ))\n```\n:::\n\n\n## Age gap in Hollywood relationships {.smaller}\n\n![](images/09/hollywood-ages.jpeg){fig-align=\"center\" width=\"600\"}\n\n## Goal 2.1: Reading Excel files & non-tidy data {.smaller}\n\n-   Read an Excel file with non-tidy data\n\n-   Tidy it up!\n\n## Goal 2.2: String Functions {.smaller}\n\n::: columns\n::: {.column width=\"70%\"}\nWe've seen lots of functions that deal with numeric data (`mean`, `median`, `sum`, etc.) - what about characters?\n\n-   **stringr** is a **tidyverse** package with lots of functions for dealing with character strings\n\n-   today: **str_detect** in **stringr**\n:::\n\n::: {.column width=\"30%\"}\n![](images/stringr.png){width=\"185\"}\n:::\n:::\n\n## Goal 2.2: String Functions {.smaller}\n\n-   **str_detect()** identifies if some characters are a substring of a larger string\n\n-   useful in cases when you need to check some condition, for example:\n\n    -   in a `filter()`\n\n    -   in an `if_else()` or `case_when()`\n\n## Goal 2.2: String Functions {.smaller}\n\n-   **str_detect()** identifies if some characters are a substring of a larger string\n\n-   useful in cases when you need to check some condition, for example:\n\n    -   in a `filter()`\n\n    -   in an `if_else()` or `case_when()`\n\n**example:** which classes in a list are in the stats department?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclasses <- c(\"sta199\", \"dance122\", \"math185\", \"sta240\", \"pubpol202\")\nstr_detect(classes, \"sta\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE FALSE  TRUE FALSE\n```\n\n\n:::\n:::\n\n\n## Goal 2.2: String Functions {.smaller}\n\nGeneral form:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(character_var, \"word_to_detect\")\n```\n:::\n\n\n## Sales data\n\n![](images/09/sales-excel.png)\n\n. . .\n\n::: question\nAre these data tidy?\nWhy or why not?\n:::\n\n## Sales data\n\n::: question\nWhat \"data moves\" do we need to go from the original, non-tidy data to this, tidy one?\n:::\n\n![](images/09/sales-2.png){width=\"150\"}\n",
    "supporting": [
      "09-import_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}