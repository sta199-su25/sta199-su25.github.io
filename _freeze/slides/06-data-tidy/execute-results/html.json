{
  "hash": "83a62766a9b29aa9f31dff9c43aa63db",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Tidying\"\nsubtitle: \"Lecture 5\"\ndate: \"2025-05-19\"\nformat: \n  revealjs:\n    output-file: 06-data-tidy-slides.html\nauto-stretch: false\n---\n\n## Announcements/Reminders {.smaller}\n\n-   You have lab today!\n    Lab will be a little longer.\n\n-   Tomorrow's office hours are with Katie on Zoom.\n\n## Outline {.smaller}\n\n-   ***Last Time:*** Did more data transformation and *exploratory data analysis*.\n\n    -   Look at the rest of AE-05!\n\n-   ***Today:*** Learn about data tidying.\n\n\n::: {.cell}\n\n:::\n\n\n## Assigment\n\nHow can we save the changes we make to a data frame?\n\n## Assignment {.smaller}\n\nLet's make a tiny data frame to use as an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ndf <- tibble(x = c(1, 2, 3, 4, 5), y = c(\"a\", \"a\", \"b\", \"c\", \"c\"))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x y    \n  <dbl> <chr>\n1     1 a    \n2     2 a    \n3     3 b    \n4     4 c    \n5     5 c    \n```\n\n\n:::\n:::\n\n\n## Assignment {.smaller}\n\n::: columns\n::: {.column .fragment width=\"50%\"}\n> **Do something and show me**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  mutate(x = x * 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x y    \n  <dbl> <chr>\n1     2 a    \n2     4 a    \n3     6 b    \n4     8 c    \n5    10 c    \n```\n\n\n:::\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x y    \n  <dbl> <chr>\n1     1 a    \n2     2 a    \n3     3 b    \n4     4 c    \n5     5 c    \n```\n\n\n:::\n:::\n\n:::\n\n::: {.column .fragment width=\"50%\"}\n> **Do something and save result**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df |>\n  mutate(x = x * 2)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x y    \n  <dbl> <chr>\n1     2 a    \n2     4 a    \n3     6 b    \n4     8 c    \n5    10 c    \n```\n\n\n:::\n:::\n\n:::\n:::\n\n## Assignment {.smaller}\n\n::: columns\n::: {.column .fragment width=\"50%\"}\n> **Do something, save result, overwriting original**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5-7\"}\ndf <- tibble(\n  x = c(1, 2, 3, 4, 5), \n  y = c(\"a\", \"a\", \"b\", \"c\", \"c\")\n)\ndf <- df |>\n  mutate(x = x * 2)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x y    \n  <dbl> <chr>\n1     2 a    \n2     4 a    \n3     6 b    \n4     8 c    \n5    10 c    \n```\n\n\n:::\n:::\n\n:::\n\n::: {.column .fragment width=\"50%\"}\n> **Do something, save result, *not* overwriting original**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5-7\"}\ndf <- tibble(\n  x = c(1, 2, 3, 4, 5), \n  y = c(\"a\", \"a\", \"b\", \"c\", \"c\")\n)\ndf_new <- df |>\n  mutate(x = x * 2)\ndf_new\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x y    \n  <dbl> <chr>\n1     2 a    \n2     4 a    \n3     6 b    \n4     8 c    \n5    10 c    \n```\n\n\n:::\n:::\n\n:::\n:::\n\n## Assignment {.smaller}\n\n::: columns\n::: {.column .fragment width=\"50%\"}\n> **Do something, save result, overwriting original *when you shouldn't***\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5-8\"}\ndf <- tibble(\n  x = c(1, 2, 3, 4, 5), \n  y = c(\"a\", \"a\", \"b\", \"c\", \"c\")\n)\ndf <- df |>\n  group_by(y) |>\n  summarize(mean_x = mean(x))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  y     mean_x\n  <chr>  <dbl>\n1 a        1.5\n2 b        3  \n3 c        4.5\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column .fragment width=\"50%\"}\n> **Do something, save result, *not* overwriting original *when you shouldn't***\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5-8\"}\ndf <- tibble(\n  x = c(1, 2, 3, 4, 5), \n  y = c(\"a\", \"a\", \"b\", \"c\", \"c\")\n)\ndf_summary <- df |>\n  group_by(y) |>\n  summarize(mean_x = mean(x))\ndf_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  y     mean_x\n  <chr>  <dbl>\n1 a        1.5\n2 b        3  \n3 c        4.5\n```\n\n\n:::\n:::\n\n:::\n:::\n\n## Assignment {.smaller}\n\n::: columns\n::: {.column .fragment width=\"50%\"}\n> **Do something, save result, overwriting original**\\\n> ***data frame***\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5-7\"}\ndf <- tibble(\n  x = c(1, 2, 3, 4, 5), \n  y = c(\"a\", \"a\", \"b\", \"c\", \"c\")\n)\ndf <- df |>\n  mutate(z = x + 2)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n      x y         z\n  <dbl> <chr> <dbl>\n1     1 a         3\n2     2 a         4\n3     3 b         5\n4     4 c         6\n5     5 c         7\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column .fragment width=\"50%\"}\n> **Do something, save result, overwriting original**\\\n> ***column***\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5-7\"}\ndf <- tibble(\n  x = c(1, 2, 3, 4, 5), \n  y = c(\"a\", \"a\", \"b\", \"c\", \"c\")\n)\ndf <- df |>\n  mutate(x = x + 2)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x y    \n  <dbl> <chr>\n1     3 a    \n2     4 a    \n3     5 b    \n4     6 c    \n5     7 c    \n```\n\n\n:::\n:::\n\n:::\n:::\n\n## Assignment: when?? {.smaller}\n\n***When should you assign results to a variable?***\n\n-   If you know you will want to use the result multiple times\n\n-   We will tell you on the lab when we want you to assign a variable to a pipeline result vs. just show the pipeline\n\n::: callout-caution\nBe careful about overwriting the original data!!\n:::\n\n# Data tidying\n\n## Tidy data\n\n> \"Tidy datasets are easy to manipulate, model and visualise, and have a specific structure: each variable is a column, each observation is a row, and each type of observational unit is a table.\"\n>\n> Tidy Data, <https://vita.had.co.nz/papers/tidy-data.pdf>\n\n. . .\n\n**Note:** \"easy to manipulate\" = \"straightforward to manipulate\"\n\n## Goal\n\nVisualize StatSci majors over the years!\n\n![](images/06/statsci-majors.png)\n\n## Data {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci <- read_csv(\"data/statsci.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 4 Columns: 15\n── Column specification ──────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): degree\ndbl (14): 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 20...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nstatsci\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 15\n  degree       `2011` `2012` `2013` `2014` `2015` `2016` `2017` `2018`\n  <chr>         <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 Statistical…     NA      1     NA     NA      4      4      1     NA\n2 Statistical…      2      2      4      1      3      6      3      4\n3 Statistical…      2      6      1     NA      5      6      6      8\n4 Statistical…      5      9      4     13     10     17     24     21\n# ℹ 6 more variables: `2019` <dbl>, `2020` <dbl>, `2021` <dbl>,\n#   `2022` <dbl>, `2023` <dbl>, `2024` <dbl>\n```\n\n\n:::\n:::\n\n\n-   The first column (variable) is the `degree`, and there are 4 possible degrees: BS (Bachelor of Science), BS2 (Bachelor of Science, 2nd major), AB (Bachelor of Arts), AB2 (Bachelor of Arts, 2nd major).\n\n-   The remaining columns show the number of students graduating with that major in a given academic year from 2011 to 2024.\n\n## Let's plan! {.smaller .nostretch}\n\nIn a perfect world, how would our data be formatted to create this plot?\nWhat do the columns need to be?\nWhat would go inside `aes` when we call `ggplot`?\n\n![](images/06/statsci-majors.png)\n\n## The goal\n\nWe want to be able to write code that starts something like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(statsci, aes(x = year, y = n, color = degree_type)) + \n  ...\n```\n:::\n\n\nBut the data are not in a format that will allow us to do that.\n\n## The challenge {.smaller .scrollable}\n\n::: columns\n::: {.column .fragment width=\"69%\"}\n> How do we go from this...\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 8\n  degree `2011` `2012` `2013` `2014` `2015` `2016` `2017`\n  <fct>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 AB2        NA      1     NA     NA      4      4      1\n2 AB          2      2      4      1      3      6      3\n3 BS2         2      6      1     NA      5      6      6\n4 BS          5      9      4     13     10     17     24\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column .fragment width=\"29%\"}\n> ...to this?\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 56 × 3\n   degree_type  year     n\n   <fct>       <dbl> <dbl>\n 1 AB2          2011     0\n 2 AB2          2012     1\n 3 AB2          2013     0\n 4 AB2          2014     0\n 5 AB2          2015     4\n 6 AB2          2016     4\n 7 AB2          2017     1\n 8 AB2          2018     0\n 9 AB2          2019     0\n10 AB2          2020     1\n11 AB2          2021     2\n12 AB2          2022     0\n13 AB2          2023     3\n14 AB2          2024     1\n15 AB           2011     2\n16 AB           2012     2\n# ℹ 40 more rows\n```\n\n\n:::\n:::\n\n:::\n:::\n\n. . .\n\nWith the command `pivot_longer()`!\n\n## `pivot_longer()` {.smaller .scrollable}\n\n::: task\nPivot the `statsci` data frame *longer* such that:\n\n-   each row represents a degree type / year combination\n\n-   `year` and `n`umber of graduates for that year are columns in the data frame.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci |>\n  pivot_longer(\n    cols = -degree,\n    names_to = \"year\",\n    values_to = \"n\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 56 × 3\n   degree                    year      n\n   <chr>                     <chr> <dbl>\n 1 Statistical Science (AB2) 2011     NA\n 2 Statistical Science (AB2) 2012      1\n 3 Statistical Science (AB2) 2013     NA\n 4 Statistical Science (AB2) 2014     NA\n 5 Statistical Science (AB2) 2015      4\n 6 Statistical Science (AB2) 2016      4\n 7 Statistical Science (AB2) 2017      1\n 8 Statistical Science (AB2) 2018     NA\n 9 Statistical Science (AB2) 2019     NA\n10 Statistical Science (AB2) 2020      1\n# ℹ 46 more rows\n```\n\n\n:::\n:::\n\n\n## `year`\n\n::: question\nWhat is the type of the `year` variaBle?\nWhy?\nWhat should it be?\n:::\n\n. . .\n\n-   It's a character (`chr`) variable because the information came from the column names of the original data frame\n\n-   R cannot know that these words represent years.\n\n-   The variable type should be numeric.\n\n\n# AE 06\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}