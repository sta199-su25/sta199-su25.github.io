{
  "hash": "555537238463ed9f25d84c8a9d3d9216",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"More Data Transformation\"\nsubtitle: \"Lecture 5\"\ndate: \"2025-05-19\"\nformat: \n  revealjs:\n    output-file: 05-data-transform-2-slides.html\nauto-stretch: false\n---\n\n## Announcements/Reminders {.smaller}\n\n-   Lab is due TONIGHT at 11:59PM\n\n-   Come to office hours and/or post on Ed for help!\n\n-   Office hours are tonight from **5:30-7:30PM** in **Old Chem 203**.\n\n-   AEs need to be pushed by the **END OF CLASS (10:45AM)!!**\n\n-   Make sure you are in the right repository.\n\n## Lab: Narrative  {.smaller}\n\n-   ***Boxplots, histograms, density plots:***\n\n    -   Center: Give an idea of a 'typical value' (median, most common range, etc.);\n\n    -   Spread: Does the data have a lot of variability? Or just a little?\n        (IQR, outliers)\n\n    -   Shape: Is there skew? Which direction? Is it unimodal or multimodal?\n    \n  \n## Lab: Narrative  {.smaller}\n\n-   ***Scatter Plots ***\n\n    -   Is there a relationship between the two variables? Is it positive or negative?\n    \n    -   If there is a relationship, does it seem to be strong or weak?\n    \n    -   Is the relationship linear or nonlinear?\n    \n  \n## Lab: Advice  {.smaller}\n\n-   ***Be Specific *** in your narrative. Don't just say \"the spread is small and the center is low\". What does that mean??? Give numbers, units (if available), etc.\n\n-   ***Be Specific *** in your plot labels.\n\n-  Answer all parts of the question!! Statements like \"Compare...\" mean to do so in the written answer!\n\n-  Written answers should be text outside of code chunks, not comments\n\n-  Make sure you can render to PDF early!!!\n\n\n## Outline {.smaller}\n\n-   ***Last Time:*** Started learning about data transformation!\n\n-   ***Today:***\n\n    -   Review from last time + finish AE04\n\n    -   More about the pipe\n\n    -   Transformation + plotting\n\n\n::: {.cell}\n\n:::\n\n\n## Quick Review: Row operations {.smaller}\n\n::: columns\n::: {.column width=\"70%\"}\n-   `slice()`: chooses rows based on location\\\n-   `filter()`: chooses rows based on column values\\\n-   `arrange()`: changes the order of the rows\\\n-   `sample_n()`: take a random subset of the rows\\\n:::\n\n::: {.column width=\"30%\"}\n| X1  | X2  | X3  |\n|:---:|:---:|:---:|\n|  1  |  a  | yes |\n|  3  |  b  | no  |\n|  5  |  a  | yes |\n|  7  |  b  | yes |\n|  9  |  a  | yes |\n:::\n:::\n\n## Quick Review: Column operations {.smaller}\n\n::: columns\n::: {.column width=\"70%\"}\n-   `select()`: changes whether or not a column is included\\\n-   `rename()`: changes the name of columns\\\n-   `mutate()`: changes the values of columns and creates new columns\\\n:::\n\n::: {.column width=\"30%\"}\n| X1  | X2  | X3  |\n|:---:|:---:|:---:|\n|  1  |  a  | yes |\n|  3  |  b  | no  |\n|  5  |  a  | yes |\n|  7  |  b  | yes |\n|  9  |  a  | yes |\n:::\n:::\n\n## Quick Review: Groups of rows {.smaller}\n\n::: columns\n::: {.column width=\"70%\"}\n-   `summarize()`: collapses a group into a single row\\\n-   `count()`: count unique values of one or more variables\\\n-   `group_by()`: perform calculations separately for each value of a variable\\\n:::\n\n::: {.column width=\"30%\"}\n| X1  | X2  | X3  |\n|:---:|:---:|:---:|\n|  1  |  a  | yes |\n|  3  |  b  | no  |\n|  5  |  a  | yes |\n|  7  |  b  | yes |\n|  9  |  a  | yes |\n:::\n:::\n\n# AE-04\n\n## Recap: Group by, summarize, mutate {.smaller}\n\nWhat does group by do here?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel |>\n  group_by(binary) |>\n  summarise(mean_roi = mean(roi, na.rm = TRUE), \n            mean_budget = mean(budget_2013)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  binary mean_roi mean_budget\n  <chr>     <dbl>       <dbl>\n1 FAIL       8.36   65877024.\n2 PASS       7.99   46913086.\n```\n\n\n:::\n:::\n\n## Recap: Group by, summarize, mutate {.smaller}\n\nWhat does group by do here?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel |>\n  #group_by(binary) |>\n  summarise(mean_roi = mean(roi, na.rm = TRUE), \n            mean_budget = mean(budget_2013)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  mean_roi mean_budget\n     <dbl>       <dbl>\n1     8.19   57035015.\n```\n\n\n:::\n:::\n\n## Recap: Group by, summarize, mutate {.smaller}\n\nWhat if I change summarize to mutate?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel |>\n  group_by(binary) |>\n  mutate(mean_roi = mean(roi, na.rm = TRUE), \n            mean_budget = mean(budget_2013)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,615 × 9\n# Groups:   binary [2]\n   title          year gross_2013 budget_2013    roi binary clean_test\n   <chr>         <dbl>      <dbl>       <dbl>  <dbl> <chr>  <chr>     \n 1 21 & Over      2013   67878146    13000000  5.22  FAIL   notalk    \n 2 Dredd 3D       2012   55078343    45658735  1.21  PASS   ok        \n 3 12 Years a S…  2013  211714070    20000000 10.6   FAIL   notalk    \n 4 2 Guns         2013  208105475    61000000  3.41  FAIL   notalk    \n 5 42             2013  190040426    40000000  4.75  FAIL   men       \n 6 47 Ronin       2013  184166317   225000000  0.819 FAIL   men       \n 7 A Good Day t…  2013  371598396    92000000  4.04  FAIL   notalk    \n 8 About Time     2013  102648667    12000000  8.55  PASS   ok        \n 9 Admission      2013   36014634    13000000  2.77  PASS   ok        \n10 After Earth    2013  304895295   130000000  2.35  FAIL   notalk    \n# ℹ 1,605 more rows\n# ℹ 2 more variables: mean_roi <dbl>, mean_budget <dbl>\n```\n\n\n:::\n:::\n\n\n## Recap: Group by, summarize, mutate {.smaller}\n\nWhat if I change summarize to mutate?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel |>\n  group_by(binary) |>\n  mutate(mean_roi = mean(roi, na.rm = TRUE), \n            mean_budget = mean(budget_2013)) |>\n  select(title, binary, mean_roi, mean_budget)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,615 × 4\n# Groups:   binary [2]\n   title                  binary mean_roi mean_budget\n   <chr>                  <chr>     <dbl>       <dbl>\n 1 21 & Over              FAIL       8.36   65877024.\n 2 Dredd 3D               PASS       7.99   46913086.\n 3 12 Years a Slave       FAIL       8.36   65877024.\n 4 2 Guns                 FAIL       8.36   65877024.\n 5 42                     FAIL       8.36   65877024.\n 6 47 Ronin               FAIL       8.36   65877024.\n 7 A Good Day to Die Hard FAIL       8.36   65877024.\n 8 About Time             PASS       7.99   46913086.\n 9 Admission              PASS       7.99   46913086.\n10 After Earth            FAIL       8.36   65877024.\n# ℹ 1,605 more rows\n```\n\n\n:::\n:::\n\n\n## Recap: Group by, summarize, mutate {.smaller}\n\nYou can group by more than one variable!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel |>\n  group_by(binary, year) |>\n  summarise(mean_roi = mean(roi, na.rm = TRUE), \n            mean_budget = mean(budget_2013)) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'binary'. You can override using\nthe `.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 4\n# Groups:   binary [2]\n   binary  year mean_roi mean_budget\n   <chr>  <dbl>    <dbl>       <dbl>\n 1 FAIL    1990    13.1    73101991.\n 2 FAIL    1991     6.71   74299353 \n 3 FAIL    1992    46.3    38883983.\n 4 FAIL    1993     6.36   49099374.\n 5 FAIL    1994    23.7    57812022.\n 6 FAIL    1995     5.69   68251510.\n 7 FAIL    1996     3.82   68600475.\n 8 FAIL    1997    16.5    73257554.\n 9 FAIL    1998     6.95   53083540.\n10 FAIL    1999     5.12   72804781.\n# ℹ 38 more rows\n```\n\n\n:::\n:::\n\n\n## Recap: Group by, summarize, mutate {.smaller}\n\nYou can un group with `ungroup()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel |>\n  group_by(binary, year) |>\n  summarise(mean_roi = mean(roi, na.rm = TRUE), \n            mean_budget = mean(budget_2013)) |>\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'binary'. You can override using\nthe `.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 4\n   binary  year mean_roi mean_budget\n   <chr>  <dbl>    <dbl>       <dbl>\n 1 FAIL    1990    13.1    73101991.\n 2 FAIL    1991     6.71   74299353 \n 3 FAIL    1992    46.3    38883983.\n 4 FAIL    1993     6.36   49099374.\n 5 FAIL    1994    23.7    57812022.\n 6 FAIL    1995     5.69   68251510.\n 7 FAIL    1996     3.82   68600475.\n 8 FAIL    1997    16.5    73257554.\n 9 FAIL    1998     6.95   53083540.\n10 FAIL    1999     5.12   72804781.\n# ℹ 38 more rows\n```\n\n\n:::\n:::\n\n\n## More about the pipe {.smaller}\n\n-   The pipe operator passes what comes before it into the function that comes after it as the first argument in that function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(1, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n<br>\n\n## More about the pipe {.smaller}\n\n-   The pipe operator passes what comes before it into the function that comes after it as the first argument in that function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(1, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 |> \n  sum(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n## Pipe + ggplot() !! {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](05-data-transform-2_files/figure-revealjs/pipe-plot-1.png){width=960}\n:::\n:::\n\n\n## Pipe + ggplot() !! {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel |>\n  ggplot(aes(x = budget_2013)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](05-data-transform-2_files/figure-revealjs/pipe-plot-2s-1.png){width=960}\n:::\n:::\n\n\n## Why is this useful?\n\n-   We can do data transformation immediately followed by a plot!\n\n-   Normally, even if we are just plotting, we use the pipe with ggplot().\n\n## Plot + data transform {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,615 × 7\n   title          year gross_2013 budget_2013    roi binary clean_test\n   <chr>         <dbl>      <dbl>       <dbl>  <dbl> <chr>  <chr>     \n 1 21 & Over      2013   67878146    13000000  5.22  FAIL   notalk    \n 2 Dredd 3D       2012   55078343    45658735  1.21  PASS   ok        \n 3 12 Years a S…  2013  211714070    20000000 10.6   FAIL   notalk    \n 4 2 Guns         2013  208105475    61000000  3.41  FAIL   notalk    \n 5 42             2013  190040426    40000000  4.75  FAIL   men       \n 6 47 Ronin       2013  184166317   225000000  0.819 FAIL   men       \n 7 A Good Day t…  2013  371598396    92000000  4.04  FAIL   notalk    \n 8 About Time     2013  102648667    12000000  8.55  PASS   ok        \n 9 Admission      2013   36014634    13000000  2.77  PASS   ok        \n10 After Earth    2013  304895295   130000000  2.35  FAIL   notalk    \n# ℹ 1,605 more rows\n```\n\n\n:::\n:::\n\n\n## Plot + data transform {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel |>\n  mutate(budget_in_millions = budget_2013/1000000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,615 × 8\n   title          year gross_2013 budget_2013    roi binary clean_test\n   <chr>         <dbl>      <dbl>       <dbl>  <dbl> <chr>  <chr>     \n 1 21 & Over      2013   67878146    13000000  5.22  FAIL   notalk    \n 2 Dredd 3D       2012   55078343    45658735  1.21  PASS   ok        \n 3 12 Years a S…  2013  211714070    20000000 10.6   FAIL   notalk    \n 4 2 Guns         2013  208105475    61000000  3.41  FAIL   notalk    \n 5 42             2013  190040426    40000000  4.75  FAIL   men       \n 6 47 Ronin       2013  184166317   225000000  0.819 FAIL   men       \n 7 A Good Day t…  2013  371598396    92000000  4.04  FAIL   notalk    \n 8 About Time     2013  102648667    12000000  8.55  PASS   ok        \n 9 Admission      2013   36014634    13000000  2.77  PASS   ok        \n10 After Earth    2013  304895295   130000000  2.35  FAIL   notalk    \n# ℹ 1,605 more rows\n# ℹ 1 more variable: budget_in_millions <dbl>\n```\n\n\n:::\n:::\n\n\n## Plot + data transform {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel |>\n  mutate(budget_in_millions = budget_2013/1000000) |>\n  ggplot(aes(x = budget_in_millions))\n```\n\n::: {.cell-output-display}\n![](05-data-transform-2_files/figure-revealjs/pipe-plot-9-1.png){width=960}\n:::\n:::\n\n\n## Exploratory Data Analysis\n\nWhat is exploratory data analysis (EDA)??\n\n-   Basically everything we have done so far\n\n-   Making plots and computing summary statistics (proportions, means, IQR, etc.) to help *explore* the data\n\n# AE 05 {background-image=\"images/spirit.png\" background-size=\"cover\" background-position=\"center\" background-repeat=\"no-repeat\" background-opacity=\"0.7\" style=\"margin-top:-16vh;\"}\n\n::: {style=\"position:absolute; bottom:15.9em; right:0.01em; font-size:0.4em; color:rgba(255,255,255,0.8);\"}\n<a href=\"https://your.source.link\" style=\"color:inherit; text-decoration:underline;\"> Image source </a>\n:::\n\n## Assignment {.smaller}\n\nLet's make a tiny data frame to use as an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ndf <- tibble(x = c(1, 2, 3, 4, 5), y = c(\"a\", \"a\", \"b\", \"c\", \"c\"))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x y    \n  <dbl> <chr>\n1     1 a    \n2     2 a    \n3     3 b    \n4     4 c    \n5     5 c    \n```\n\n\n:::\n:::\n\n\n## Assignment {.smaller}\n\n::: columns\n::: {.column .fragment width=\"50%\"}\n> **Do something and show me**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  mutate(x = x * 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x y    \n  <dbl> <chr>\n1     2 a    \n2     4 a    \n3     6 b    \n4     8 c    \n5    10 c    \n```\n\n\n:::\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x y    \n  <dbl> <chr>\n1     1 a    \n2     2 a    \n3     3 b    \n4     4 c    \n5     5 c    \n```\n\n\n:::\n:::\n\n:::\n\n::: {.column .fragment width=\"50%\"}\n> **Do something and save result**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df |>\n  mutate(x = x * 2)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x y    \n  <dbl> <chr>\n1     2 a    \n2     4 a    \n3     6 b    \n4     8 c    \n5    10 c    \n```\n\n\n:::\n:::\n\n:::\n:::\n\n## Assignment {.smaller}\n\n::: columns\n::: {.column .fragment width=\"50%\"}\n> **Do something, save result, overwriting original**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5-7\"}\ndf <- tibble(\n  x = c(1, 2, 3, 4, 5), \n  y = c(\"a\", \"a\", \"b\", \"c\", \"c\")\n)\ndf <- df |>\n  mutate(x = x * 2)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x y    \n  <dbl> <chr>\n1     2 a    \n2     4 a    \n3     6 b    \n4     8 c    \n5    10 c    \n```\n\n\n:::\n:::\n\n:::\n\n::: {.column .fragment width=\"50%\"}\n> **Do something, save result, *not* overwriting original**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5-7\"}\ndf <- tibble(\n  x = c(1, 2, 3, 4, 5), \n  y = c(\"a\", \"a\", \"b\", \"c\", \"c\")\n)\ndf_new <- df |>\n  mutate(x = x * 2)\ndf_new\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x y    \n  <dbl> <chr>\n1     2 a    \n2     4 a    \n3     6 b    \n4     8 c    \n5    10 c    \n```\n\n\n:::\n:::\n\n:::\n:::\n\n## Assignment {.smaller}\n\n::: columns\n::: {.column .fragment width=\"50%\"}\n> **Do something, save result, overwriting original *when you shouldn't***\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5-8\"}\ndf <- tibble(\n  x = c(1, 2, 3, 4, 5), \n  y = c(\"a\", \"a\", \"b\", \"c\", \"c\")\n)\ndf <- df |>\n  group_by(y) |>\n  summarize(mean_x = mean(x))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  y     mean_x\n  <chr>  <dbl>\n1 a        1.5\n2 b        3  \n3 c        4.5\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column .fragment width=\"50%\"}\n> **Do something, save result, *not* overwriting original *when you shouldn't***\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5-8\"}\ndf <- tibble(\n  x = c(1, 2, 3, 4, 5), \n  y = c(\"a\", \"a\", \"b\", \"c\", \"c\")\n)\ndf_summary <- df |>\n  group_by(y) |>\n  summarize(mean_x = mean(x))\ndf_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  y     mean_x\n  <chr>  <dbl>\n1 a        1.5\n2 b        3  \n3 c        4.5\n```\n\n\n:::\n:::\n\n:::\n:::\n\n## Assignment {.smaller}\n\n::: columns\n::: {.column .fragment width=\"50%\"}\n> **Do something, save result, overwriting original**\\\n> ***data frame***\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5-7\"}\ndf <- tibble(\n  x = c(1, 2, 3, 4, 5), \n  y = c(\"a\", \"a\", \"b\", \"c\", \"c\")\n)\ndf <- df |>\n  mutate(z = x + 2)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n      x y         z\n  <dbl> <chr> <dbl>\n1     1 a         3\n2     2 a         4\n3     3 b         5\n4     4 c         6\n5     5 c         7\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column .fragment width=\"50%\"}\n> **Do something, save result, overwriting original**\\\n> ***column***\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5-7\"}\ndf <- tibble(\n  x = c(1, 2, 3, 4, 5), \n  y = c(\"a\", \"a\", \"b\", \"c\", \"c\")\n)\ndf <- df |>\n  mutate(x = x + 2)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x y    \n  <dbl> <chr>\n1     3 a    \n2     4 a    \n3     5 b    \n4     6 c    \n5     7 c    \n```\n\n\n:::\n:::\n\n:::\n:::\n",
    "supporting": [
      "05-data-transform-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}