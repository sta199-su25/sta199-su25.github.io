{
  "hash": "e5e7df9f6c9eb34e563c448f4e035212",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"AE 01: Meet the penguins\"\nexecute:\n  error: true\n---\n\nThe goal of this application exercise is to get exposure to using the computational toolkit.\n\nSome things to remember:\n\n-   Code goes in **\"code chunks\"**: when you're in visual mode, these have grey boxes; in both visual and source, they can be recognized by '{r}'\n-   To **run a code chunk**, click the little green right facing arrow; to run a code chunk and *all preceding* code chunks, use the downward pointing arrow.\n-   Text goes outside of the code chunks!\n-   Use the git pane to commit, push, and pull changes.\n-   Use render to see the resulting document\n\n## Load Packages\n\nFor this application exercise, we'll use the **tidyverse** and **palmerpenguins** packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'tidyr' was built under R version 4.4.1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'palmerpenguins' was built under R version 4.4.1\n```\n\n\n:::\n:::\n\n\n## Examine Data\n\nThe dataset we will use is called `penguins`; it was loaded with the **palmerpenguins** package.\nYou'll notice it's *not* visible yet in the environment pane - let's put it there.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"penguins\")\n```\n:::\n\n\nTwo useful functions to examine it are `glimpse()` and `View()`\n\nLet's `glimpse()` at it.\n\n-   **Your turn:** Replace `#add code here` with the code for \"glimpse\" ing at the data `penguins` data frame -- `glimpse(penguins)`. Render the document and view the output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\nNow, let's `View()` it.\n\n-   **Your turn:** Replace `#add code here` with the code for \"view\" ing at the data `penguins` data frame -- `View(penguins)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\nWhat information can you see from these two operations?\nHow are they different?\n\n## Some R Fundamentals\n\nYou just used some functions above - `library()`, `data()`, `glimpse()`, and `view()`.\nLet's practice with some more!\n\n### Getting Help\n\nThere is a function that tells you how many rows are in the data frame: `nrow()`.\nPerhaps this is your first time using it and you aren't sure how it works: you can use `?` to see the documentation.\n\n-   **Your turn:** Write code to get help with the `nrow` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#add code here\n```\n:::\n\n\n*(This works for any function, not just `nrow`!)*\n\n-   **Your Turn:** Now, let's compute the number of rows in the data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#add code here\n```\n:::\n\n\n### Oh no!! Errors!!\n\nUnfortunately, not every time you run a function it will work correctly.\n\nWhat happens if you run `mean()` on the data frame?\nDoes this even make sense???\n\n-   **Your turn:** try running this function on the `penguins` data frame and see what happens!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n### Accessing Columns\n\nAs we saw with the `mean` example, not every function works on a full data frame.\nSometimes, you need to access just one column.\nTo do that, we can use `$` as `dataframe$column_name`.\n\n-   **Your turn:** In the code chunk below, compute the mean of the `bill_depth_mm` variable in the `penguins` data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#add code here\n```\n:::\n\n\nHmmm... something weird is still happening!\nWhat does this NA value mean??\nDo you have any guesses???\nHow can we fix this?\n\n### \\>1 Argument\n\nTo fix our issue with mean, we need to tell the function something else (that is, use more than one *argument)*.\n\n-   **Your turn:** First, get help with the `?` . Then, try to compute the `mean` value, ignoring the NA values\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#add code here\n```\n:::\n\n\n### How is the document looking?\n\nClick **render** to see!\n\n### Let's push our changes to GitHub!\n\nRemember:\n\n-   Stage changes with the checkboxes\n\n-   Commit with a message\n\n-   Push!\n\n## Miscellaneous:\n\nIf there is extra time in class, we'll add some other tips here!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}