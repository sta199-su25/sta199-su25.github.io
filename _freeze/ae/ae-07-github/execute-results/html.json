{
  "hash": "e98f30b7e182b1cc22d2b5b7e393465e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"AE 07: Joining\"\nformat:\n  html:\n    self-contained: true\n---\n\n## Goal\n\nLet's suppose we were interested in examining the total populations of continents.\nHowever, these are the two data sets we have available:\n\n-   world-pop-22.csv: contains data from The World Bank with countries' populations\n\n-   continents.csv: contains data mapping countries to continents\n\nTo do analysis of population by continent, we need to join!\n\n#### Load packages and read in data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\npopulation <- read_csv(\"data/world-pop-2022.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 217 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): country\ndbl (2): year, population\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ncontinents <- read_csv(\"data/continents.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 285 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): entity, code, continent\ndbl (1): year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n#### Take a look at the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 217 × 3\n   country              year population\n   <chr>               <dbl>      <dbl>\n 1 Afghanistan          2022    41129. \n 2 Albania              2022     2778. \n 3 Algeria              2022    44903. \n 4 American Samoa       2022       44.3\n 5 Andorra              2022       79.8\n 6 Angola               2022    35589. \n 7 Antigua and Barbuda  2022       93.8\n 8 Argentina            2022    46235. \n 9 Armenia              2022     2780. \n10 Aruba                2022      106. \n# ℹ 207 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\ncontinents\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 285 × 4\n   entity                code      year continent    \n   <chr>                 <chr>    <dbl> <chr>        \n 1 Abkhazia              OWID_ABK  2015 Asia         \n 2 Afghanistan           AFG       2015 Asia         \n 3 Akrotiri and Dhekelia OWID_AKD  2015 Asia         \n 4 Aland Islands         ALA       2015 Europe       \n 5 Albania               ALB       2015 Europe       \n 6 Algeria               DZA       2015 Africa       \n 7 American Samoa        ASM       2015 Oceania      \n 8 Andorra               AND       2015 Europe       \n 9 Angola                AGO       2015 Africa       \n10 Anguilla              AIA       2015 North America\n# ℹ 275 more rows\n```\n\n\n:::\n:::\n\n\n### Question 1: Join Concept\n\nWe want to know what continent *all* of the variables in the `population` data frame are in.\n\n-   What type of join should we use?\n\n-   Which variable in each data frame should we use?\n\n### Question 2: Implement the Join\n\nJoin the two data frames and name assign the joined data frame to a new data frame `population_continents` .\n\n\n::: {.cell}\n\n:::\n\n\nHow does that look?\nTake a look at your new data frame!\n\n### Question 3: What went wrong?\n\nIt might not be obvious, but something is a little weird about this.\nGo ahead and `filter` the resulting data frame to see if any of the continent values are `NA`.\n\n\n::: {.cell}\n\n:::\n\n\nThere are!\nThis means that there were no rows in the `continents` data frame with those countries.\nThat seems a little weird.\nTake a scroll through the continents data frame.\n\n***Do you see what the cause of this is??***\n\n### Question 4: Let's fix this!\n\nSo, countries have to be spelled the exact same way in each data set.\nI'm going to show you code that renames the missing countries in the `population` data set to match the spelling in `contintents`.\nThen, we will re-run the join: we are no longer missing these values!\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_new_spellings <- population |>\n  mutate(country = case_when(\n    country == \"Congo, Dem. Rep.\" ~ \"Democratic Republic of Congo\",\n    country == \"Congo, Rep.\" ~ \"Congo\",\n    country == \"Hong Kong SAR, China\" ~ \"Hong Kong\",\n    country == \"Korea, Dem. People's Rep.\" ~ \"North Korea\",\n    country == \"Korea, Rep.\" ~ \"South Korea\",\n    country == \"Kyrgyz Republic\" ~ \"Kyrgyzstan\",\n    .default = country\n    )\n  ) \n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_continent_new = population_new_spellings |>\n  left_join(continents, by = join_by(country == entity))\n```\n:::\n\n\nAre there any NAs left?\nRun the code to see!\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_continent_new |>\n  filter(is.na(continent))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 6\n# ℹ 6 variables: country <chr>, year.x <dbl>, population <dbl>, code <chr>,\n#   year.y <dbl>, continent <chr>\n```\n\n\n:::\n:::\n\n\n## The Bigger Picture\n\nHow does what we just did fit into the bigger picture of the class?\n\n-   You are almost never going to be joining data sets just for fun!\n    Joining data sets is a way to enable investigating more interesting patterns in data.\n\n-   Now, you could create plots or compute summary statistics to investigate the relationship between continent and total population.\n\n***For extra practice,*** try making a bar plot of total population in each country.\n\n***To see something new,*** try making a 'lollipop chart' of population by country.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}