{
  "hash": "383c3422f9c3099b792db4ec04132b5f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"AE 02: Bechdel Data Vis\"\nsubtitle: \"Suggested answers\"\nexecute:\n  error: true\n---\n\nIn this mini analysis we work with the data used in the FiveThirtyEight story titled [\"The Dollar-And-Cents Case Against Hollywood's Exclusion of Women\"](https://fivethirtyeight.com/features/the-dollar-and-cents-case-against-hollywoods-exclusion-of-women/).\n\nThis analysis is about the [Bechdel test](https://en.wikipedia.org/wiki/Bechdel_test), a measure of the representation of women in fiction.\n\n## Getting started\n\n### Packages\n\nWe start with loading the packages we'll use: **tidyverse** for majority of the analysis and **scales** for pretty plot labels later on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(scales)\n```\n:::\n\n\n### Data\n\nThe data are stored as a CSV (comma separated values) file in the `data` folder of your repository.\nLet's read it from there and save it as an object called `bechdel`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel <- read_csv(\"https://sta199-s24.github.io/data/bechdel.csv\")\n```\n:::\n\n\n### Get to know the data\n\nWe can use the `glimpse` function to get an overview (or \"glimpse\") of the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(bechdel)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,615\nColumns: 7\n$ title       <chr> \"21 & Over\", \"Dredd 3D\", \"12 Years a Slave\", \"2 Guns\", \"42…\n$ year        <dbl> 2013, 2012, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013…\n$ gross_2013  <dbl> 67878146, 55078343, 211714070, 208105475, 190040426, 18416…\n$ budget_2013 <dbl> 13000000, 45658735, 20000000, 61000000, 40000000, 22500000…\n$ roi         <dbl> 5.221396, 1.206305, 10.585703, 3.411565, 4.751011, 0.81851…\n$ binary      <chr> \"FAIL\", \"PASS\", \"FAIL\", \"FAIL\", \"FAIL\", \"FAIL\", \"FAIL\", \"P…\n$ clean_test  <chr> \"notalk\", \"ok\", \"notalk\", \"notalk\", \"men\", \"men\", \"notalk\"…\n```\n\n\n:::\n:::\n\n\n-   What does each observation (row) in the data set represent?\n\nEach observation represents a **movie**.\n\n-   How many observations (rows) are in the data set?\n\nThere are 1615 movies in the dataset.\n\n-   How many variables (columns) are in the data set?\n\nThere are 7 columns in the dataset.\n\n### Variables of interest\n\nThe variables we'll focus on are the following:\n\n-   `budget_2013`: Budget in 2013 inflation adjusted dollars.\n-   `gross_2013`: Gross (US and international combined) in 2013 inflation adjusted dollars.\n-   `roi`: Return on investment, calculated as the ratio of the gross to budget.\n-   `clean_test`: Bechdel test result:\n    -   `ok` = passes test\n    -   `dubious`\n    -   `men` = women only talk about men\n    -   `notalk` = women don't talk to each other\n    -   `nowomen` = fewer than two women\n-   `binary`: Bechdel Test PASS vs FAIL binary\n\nWe will also use the `year` of release in data prep and `title` of movie to take a deeper look at some outliers.\n\nThere are a few other variables in the dataset, but we won't be using them in this analysis.\n\n## Visualizing data with `ggplot2`\n\n**ggplot2** is the package and `ggplot()` is the function in this package that is used to create a plot.\n\n-   `ggplot()` creates the initial base coordinate system, and we will add layers to that base. We first specify the data set we will use with `data = bechdel`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = bechdel)\n```\n\n::: {.cell-output-display}\n![](ae-02-github-A_files/figure-html/plot-base-1.png){width=672}\n:::\n:::\n\n\n-   The `mapping` argument is paired with an aesthetic (`aes()`), which tells us how the variables in our data set should be mapped to the visual properties of the graph.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = bechdel, \n  mapping = aes(x = budget_2013, y = gross_2013)\n)\n```\n\n::: {.cell-output-display}\n![](ae-02-github-A_files/figure-html/plot-aesthetic-mapping-1.png){width=672}\n:::\n:::\n\n\nAs we previously mentioned, we often omit the names of the first two arguments in R functions.\nSo you'll often see this written as:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bechdel, aes(x = budget_2013, y = gross_2013))\n```\n\n::: {.cell-output-display}\n![](ae-02-github-A_files/figure-html/plot-simplified-call-1.png){width=672}\n:::\n:::\n\n\nNote that the result is exactly the same.\n\n-   The `geom_xx` function specifies the type of plot we want to use to represent the data. In the code below, we use `geom_point` which creates a plot where each observation is represented by a point.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bechdel, aes(x = budget_2013, y = gross_2013)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 15 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ae-02-github-A_files/figure-html/plot-point-1.png){width=672}\n:::\n:::\n\n\nNote that this results in a warning as well.\nWhat does the warning mean?\n\n## Gross revenue vs. budget\n\n### Step 1 - Your turn\n\nModify the following plot to change the color of all points to a different color.\n\n::: callout-tip\nSee <http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf> for many color options you can use by name in R or use the [hex code](https://en.wikipedia.org/wiki/Web_colors) for a color of your choice.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bechdel, aes(x = budget_2013, y = gross_2013)) +\n  geom_point(color = \"deepskyblue3\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 15 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ae-02-github-A_files/figure-html/plot-point-color-1.png){width=672}\n:::\n:::\n\n\n### Step 2 - Your turn\n\nAdd labels for the title and x and y axes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bechdel, \n       aes(x = budget_2013, y = gross_2013))+\n  geom_point(color = \"deepskyblue3\") + \n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget\"\n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 15 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ae-02-github-A_files/figure-html/plot-labels-1.png){width=672}\n:::\n:::\n\n\n### Step 3 - Your turn\n\nAn `aes`thetic is a visual property of one of the objects in your plot.\nCommonly used aesthetic options are:\n\n-   color\n-   fill\n-   shape\n-   size\n-   alpha (transparency)\n\nModify the plot below, so the `color` of the points is based on the variable `binary`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bechdel, \n       aes(x = budget_2013, y = gross_2013, color = binary)) +\n  geom_point() + \n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget, by Bechdel test result\"\n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 15 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ae-02-github-A_files/figure-html/plot-aes-color-1.png){width=672}\n:::\n:::\n\n\n::: callout-important\nWhat is the difference between how you changed the color here and how you changed the color in Step 1??\n:::\n\n*Add answer here.*\n\n### Step 4 - Your turn\n\nExpand on your plot from the previous step to make the size of your points based on `roi`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bechdel, \n       aes(x = budget_2013, y = gross_2013,\n           color = binary, size = roi)) +\n  geom_point() + \n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget, by Bechdel test result\"\n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 15 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ae-02-github-A_files/figure-html/plot-aes-size-1.png){width=672}\n:::\n:::\n\n\n### Step 5 - Your turn\n\nExpand on your plot from the previous step to make the transparency (`alpha`) of the points 0.5.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bechdel, \n       aes(x = budget_2013, y = gross_2013,\n           color = binary, size = roi)) +\n  geom_point(alpha = 0.5) + \n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget, by Bechdel test result\"\n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 15 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ae-02-github-A_files/figure-html/plot-aes-alpha-1.png){width=672}\n:::\n:::\n\n\n### Step 6 - Your turn\n\nExpand on your plot from the previous step by using `facet_wrap` to display the association between budget and gross for different values of `clean_test`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bechdel, \n       aes(x = budget_2013, y = gross_2013,\n           color = binary, size = roi)) +\n  geom_point(alpha = 0.5) + \n  facet_wrap(~clean_test) +\n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget, by Bechdel test result\"\n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 15 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ae-02-github-A_files/figure-html/plot-facet-wrap-1.png){width=672}\n:::\n:::\n\n\n### Step 7 - Demo\n\nImprove your plot from the previous step by making the x and y scales more legible.\n\n::: callout-tip\nMake use of the [**scales**](https://scales.r-lib.org/) package, specifically the `scale_x_continuous()` and `scale_y_continuous()` functions.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bechdel, \n       aes(x = budget_2013, y = gross_2013,\n           color = binary, size = roi)) +\n  geom_point(alpha = 0.5) + \n  facet_wrap(~clean_test) +\n  scale_x_continuous(labels = label_dollar(scale = 1/1000000)) +\n  scale_y_continuous(labels = label_dollar(scale = 1/1000000)) +\n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget, by Bechdel test result\"\n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 15 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ae-02-github-A_files/figure-html/plot-scales-1.png){width=672}\n:::\n:::\n\n\n### Step 8 - Your turn\n\nExpand on your plot from the previous step by using `facet_grid` to display the association between budget and gross for different combinations of `clean_test` and `binary`.\nComment on whether this was a useful update.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bechdel, \n       aes(x = budget_2013, y = gross_2013,\n           color = binary, size = roi)) +\n  geom_point(alpha = 0.5) + \n  facet_grid(binary~clean_test) +\n  scale_x_continuous(labels = label_dollar(scale = 1/1000000)) +\n  scale_y_continuous(labels = label_dollar(scale = 1/1000000)) +\n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget, by Bechdel test result\"\n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 15 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ae-02-github-A_files/figure-html/plot-facet-grid-1.png){width=672}\n:::\n:::\n\n\nThis was not a useful update as one of the levels of `clean_test` maps directly to one of the levels of `binary`.\n\n### Step 9 - Demo\n\nWhat other improvements could we make to this plot?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Answers may vary\n```\n:::\n\n\n### Render, commit, and push\n\n1.  If you made any changes since the last render, render again to get the final version of the AE.\n\n2.  Check the box next to each document in the Git tab (this is called \"staging\" the changes).\n    Commit the changes you made using a simple and informative message.\n\n3.  Use the **green arrow** to push your changes to your repo on GitHub.\n\n4.  Check your repo on GitHub and see the updated files.\n    Once your updated files are in your repo on GitHub, you're good to go!\n\n## IF TIME: Back to the penguins\n\nIt's your turn!\n\nLoad and look at the penguins data frame.\nWhat are two variables you could explore the relationship between?\n\n::: callout-note\nHint: You will need to load the necessary package first!\n:::\n\nTry to make a plot (or many!).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Answers may vary\n```\n:::\n\n\nSome ideas to try out if you're feeling particularly ambitous:\n\n-   How can you change the colors of a *variable* (in an aesthetic) to *any you want ?*\n\n-   How can you make the font of a label bigger?\n\n-   Can you facet by *more than one variable?*\n\n### Render, commit, and push\n\n1.  If you made any changes since the last render, render again to get the final version of the AE.\n\n2.  Check the box next to each document in the Git tab (this is called \"staging\" the changes).\n    Commit the changes you made using a simple and informative message.\n\n3.  Use the **green arrow** to push your changes to your repo on GitHub.\n\n4.  Check your repo on GitHub and see the updated files.\n    Once your updated files are in your repo on GitHub, you're good to go!\n",
    "supporting": [
      "ae-02-github-A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}