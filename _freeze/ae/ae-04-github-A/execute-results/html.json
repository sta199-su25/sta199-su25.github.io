{
  "hash": "e2b66e117a0d3797d197f4409dbdfc2c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"AE 04: NYC flights + data wrangling\"\nsubtitle: \"Suggested answers\"\nformat:\n  html:\n    self-contained: true\n---\n\n::: callout-important\nThese are suggested answers.\nThis document should be used as reference only, it's not designed to be an exhaustive key.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n:::\n\n\n## Exercise 1\n\n**Your turn:** Fill in the blanks:\n\nThe `flights` data frame has *336776* rows.\nEach row represents a \\_flight\\_.\n\n## Exercise 2\n\n**Your turn:** What are the names of the variables in `flights`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"year\"           \"month\"          \"day\"            \"dep_time\"      \n [5] \"sched_dep_time\" \"dep_delay\"      \"arr_time\"       \"sched_arr_time\"\n [9] \"arr_delay\"      \"carrier\"        \"flight\"         \"tailnum\"       \n[13] \"origin\"         \"dest\"           \"air_time\"       \"distance\"      \n[17] \"hour\"           \"minute\"         \"time_hour\"     \n```\n\n\n:::\n:::\n\n\n## Exercise 3 - `select()`\n\n-   Demo: Make a data frame that only contains the variables `dep_delay` and `arr_delay`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(dep_delay, arr_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 2\n   dep_delay arr_delay\n       <dbl>     <dbl>\n 1         2        11\n 2         4        20\n 3         2        33\n 4        -1       -18\n 5        -6       -25\n 6        -4        12\n 7        -5        19\n 8        -3       -14\n 9        -3        -8\n10        -2         8\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n-   Demo: Make a data frame that keeps every variable except `dep_delay`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(-dep_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 18\n    year month   day dep_time sched_dep_time arr_time sched_arr_time arr_delay\n   <int> <int> <int>    <int>          <int>    <int>          <int>     <dbl>\n 1  2013     1     1      517            515      830            819        11\n 2  2013     1     1      533            529      850            830        20\n 3  2013     1     1      542            540      923            850        33\n 4  2013     1     1      544            545     1004           1022       -18\n 5  2013     1     1      554            600      812            837       -25\n 6  2013     1     1      554            558      740            728        12\n 7  2013     1     1      555            600      913            854        19\n 8  2013     1     1      557            600      709            723       -14\n 9  2013     1     1      557            600      838            846        -8\n10  2013     1     1      558            600      753            745         8\n# ℹ 336,766 more rows\n# ℹ 10 more variables: carrier <chr>, flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n-   Demo: Make a data frame that includes all variables between `year` through `dep_delay` (inclusive). These are all variables that provide information about the departure of each flight.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(year:dep_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 6\n    year month   day dep_time sched_dep_time dep_delay\n   <int> <int> <int>    <int>          <int>     <dbl>\n 1  2013     1     1      517            515         2\n 2  2013     1     1      533            529         4\n 3  2013     1     1      542            540         2\n 4  2013     1     1      544            545        -1\n 5  2013     1     1      554            600        -6\n 6  2013     1     1      554            558        -4\n 7  2013     1     1      555            600        -5\n 8  2013     1     1      557            600        -3\n 9  2013     1     1      557            600        -3\n10  2013     1     1      558            600        -2\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n-   Demo: Use the `select` helper `contains()` to make a data frame that includes the variables associated with the arrival, i.e., contains the string `\"arr\\_\"` in the name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(contains(\"arr_\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 3\n   arr_time sched_arr_time arr_delay\n      <int>          <int>     <dbl>\n 1      830            819        11\n 2      850            830        20\n 3      923            850        33\n 4     1004           1022       -18\n 5      812            837       -25\n 6      740            728        12\n 7      913            854        19\n 8      709            723       -14\n 9      838            846        -8\n10      753            745         8\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n## Exercise 4 - `slice()`\n\n-   Demo: Display the first five rows of the `flights` data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n-   Demo: Display the last two rows of the `flights` data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  slice((n()-1):n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n1  2013     9    30       NA           1159        NA       NA           1344\n2  2013     9    30       NA            840        NA       NA           1020\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n## Exercise 5 - `arrange()`\n\n-   Demo: Let's arrange the data by departure delay, so the flights with the shortest departure delays will be at the top of the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  arrange(dep_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013    12     7     2040           2123       -43       40           2352\n 2  2013     2     3     2022           2055       -33     2240           2338\n 3  2013    11    10     1408           1440       -32     1549           1559\n 4  2013     1    11     1900           1930       -30     2233           2243\n 5  2013     1    29     1703           1730       -27     1947           1957\n 6  2013     8     9      729            755       -26     1002            955\n 7  2013    10    23     1907           1932       -25     2143           2143\n 8  2013     3    30     2030           2055       -25     2213           2250\n 9  2013     3     2     1431           1455       -24     1601           1631\n10  2013     5     5      934            958       -24     1225           1309\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n-   Question: What does it mean for the `dep_delay` to have a negative value?\n\nArrived early.\n\n-   Demo: Arrange the data by descending departure delay, so the flights with the longest departure delays will be at the top.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  arrange(desc(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n-   **Your turn:** Create a data frame that only includes the plane tail number (`tailnum`), carrier (`carrier`), and departure delay for the flight with the longest departure delay. What is the plane tail number (`tailnum`) for this flight?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(tailnum, carrier, dep_delay) %>%\n  arrange(desc(dep_delay)) |>\n  slice(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  tailnum carrier dep_delay\n  <chr>   <chr>       <dbl>\n1 N384HA  HA           1301\n```\n\n\n:::\n:::\n\n\n## Exercise 6 - `filter()`\n\n-   Demo: Filter the data frame by selecting the rows where the destination airport is RDU.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(dest == \"RDU\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8,163 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      800            810       -10      949            955\n 2  2013     1     1      832            840        -8     1006           1030\n 3  2013     1     1      851            851         0     1032           1036\n 4  2013     1     1      917            920        -3     1052           1108\n 5  2013     1     1     1024           1030        -6     1204           1215\n 6  2013     1     1     1127           1129        -2     1303           1309\n 7  2013     1     1     1157           1205        -8     1342           1345\n 8  2013     1     1     1240           1235         5     1415           1415\n 9  2013     1     1     1317           1325        -8     1454           1505\n10  2013     1     1     1449           1450        -1     1651           1640\n# ℹ 8,153 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n-   Demo: We can also filter using more than one condition. Here we select all rows where the destination airport is RDU and the arrival delay is less than 0.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(dest == \"RDU\", arr_delay < 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4,232 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      800            810       -10      949            955\n 2  2013     1     1      832            840        -8     1006           1030\n 3  2013     1     1      851            851         0     1032           1036\n 4  2013     1     1      917            920        -3     1052           1108\n 5  2013     1     1     1024           1030        -6     1204           1215\n 6  2013     1     1     1127           1129        -2     1303           1309\n 7  2013     1     1     1157           1205        -8     1342           1345\n 8  2013     1     1     1317           1325        -8     1454           1505\n 9  2013     1     1     1505           1510        -5     1654           1655\n10  2013     1     1     1800           1800         0     1945           1951\n# ℹ 4,222 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n-   **Your turn:** Describe what the code is doing in words.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(\n    dest %in% c(\"RDU\", \"GSO\"),\n    arr_delay < 0 | dep_delay < 0\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6,203 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      800            810       -10      949            955\n 2  2013     1     1      832            840        -8     1006           1030\n 3  2013     1     1      851            851         0     1032           1036\n 4  2013     1     1      917            920        -3     1052           1108\n 5  2013     1     1     1024           1030        -6     1204           1215\n 6  2013     1     1     1127           1129        -2     1303           1309\n 7  2013     1     1     1157           1205        -8     1342           1345\n 8  2013     1     1     1317           1325        -8     1454           1505\n 9  2013     1     1     1449           1450        -1     1651           1640\n10  2013     1     1     1505           1510        -5     1654           1655\n# ℹ 6,193 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n**Hint:** Logical operators in R:\n\n| operator      | definition                                               |\n|:--------------|:---------------------------------------------------------|\n| `<`           | is less than?                                            |\n| `<=`          | is less than or equal to?                                |\n| `>`           | is greater than?                                         |\n| `>=`          | is greater than or equal to?                             |\n| `==`          | is exactly equal to?                                     |\n| `!=`          | is not equal to?                                         |\n| `x & y`       | is x AND y?                                              |\n| `x | y`      | is x OR y?                                               |\n| `is.na(x)`    | is x NA?                                                 |\n| `!is.na(x)`   | is x not NA?                                             |\n| `x %in% y`    | is x in y?                                               |\n| `!(x %in% y)` | is x not in y?                                           |\n| `!x`          | is not x? (only makes sense if `x` is `TRUE` or `FALSE`) |\n\n## Exercise 7 - `count()`\n\n-   Demo: Create a frequency table of the destination locations for flights from New York.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(dest)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 105 × 2\n   dest      n\n   <chr> <int>\n 1 ABQ     254\n 2 ACK     265\n 3 ALB     439\n 4 ANC       8\n 5 ATL   17215\n 6 AUS    2439\n 7 AVL     275\n 8 BDL     443\n 9 BGR     375\n10 BHM     297\n# ℹ 95 more rows\n```\n\n\n:::\n:::\n\n\n-   Demo: In which month was there the fewest number of flights? How many flights were there in that month?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(month) |>\n  filter(n == min(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  month     n\n  <int> <int>\n1     2 24951\n```\n\n\n:::\n:::\n\n\n-   **Your turn:** On which date (month + day) was there the largest number of flights? How many flights were there on that day?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(month, day) |>\n  filter(n == max(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  month   day     n\n  <int> <int> <int>\n1    11    27  1014\n```\n\n\n:::\n:::\n\n\n## Exercise 8 - `mutate()`\n\n-   Demo: Convert `air_time` (minutes in the air) to hours and then create a new variable, `mph`, the miles per hour of the flight.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  mutate(\n    hours = air_time / 60,\n    mph = distance / hours\n    ) |>\n  select(air_time, distance, hours, mph)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 4\n   air_time distance hours   mph\n      <dbl>    <dbl> <dbl> <dbl>\n 1      227     1400 3.78   370.\n 2      227     1416 3.78   374.\n 3      160     1089 2.67   408.\n 4      183     1576 3.05   517.\n 5      116      762 1.93   394.\n 6      150      719 2.5    288.\n 7      158     1065 2.63   404.\n 8       53      229 0.883  259.\n 9      140      944 2.33   405.\n10      138      733 2.3    319.\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n-   **Your turn:** Create a new variable to calculate the percentage of flights in each month. What percentage of flights take place in July?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(month) |>\n  mutate(perc = n / sum(n) * 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n   month     n  perc\n   <int> <int> <dbl>\n 1     1 27004  8.02\n 2     2 24951  7.41\n 3     3 28834  8.56\n 4     4 28330  8.41\n 5     5 28796  8.55\n 6     6 28243  8.39\n 7     7 29425  8.74\n 8     8 29327  8.71\n 9     9 27574  8.19\n10    10 28889  8.58\n11    11 27268  8.10\n12    12 28135  8.35\n```\n\n\n:::\n:::\n\n\n-   Demo: Create a new variable, `rdu_bound`, which indicates whether the flight is to RDU or not. Then, for each departure airport (`origin`), calculate what proportion of flights originating from that airport are to RDU.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  mutate(rdu_bound = if_else(dest == \"RDU\", \"Yes\", \"No\")) |>\n  count(origin, rdu_bound) |>\n  group_by(origin) |>\n  mutate(prop = n / sum(n)) |>\n  filter(rdu_bound == \"Yes\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n# Groups:   origin [3]\n  origin rdu_bound     n   prop\n  <chr>  <chr>     <int>  <dbl>\n1 EWR    Yes        1482 0.0123\n2 JFK    Yes        3100 0.0279\n3 LGA    Yes        3581 0.0342\n```\n\n\n:::\n:::\n\n\n## Exercise 9 - `summarize()`\n\n-   Demo: Find mean arrival delay for all flights.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  summarize(mean_dep_delay = mean(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  mean_dep_delay\n           <dbl>\n1             NA\n```\n\n\n:::\n:::\n\n\n## Exercise 10 - `group_by()`\n\n-   Demo: Find mean arrival delay for for each month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  group_by(month) |>\n  summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n   month mean_arr_delay\n   <int>          <dbl>\n 1     1          6.13 \n 2     2          5.61 \n 3     3          5.81 \n 4     4         11.2  \n 5     5          3.52 \n 6     6         16.5  \n 7     7         16.7  \n 8     8          6.04 \n 9     9         -4.02 \n10    10         -0.167\n11    11          0.461\n12    12         14.9  \n```\n\n\n:::\n:::\n\n\n-   **Your turn:** What is the median departure delay for each airports around NYC (`origin`)? Which airport has the shortest median departure delay?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  group_by(origin) |>\n  summarize(med_dep_delay = median(dep_delay, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  origin med_dep_delay\n  <chr>          <dbl>\n1 EWR               -1\n2 JFK               -1\n3 LGA               -3\n```\n\n\n:::\n:::\n\n\n# Additional Practice\n\n1.  Create a new dataset that only contains flights that do not have a missing departure time. Include the columns `year`, `month`, `day`, `dep_time`, `dep_delay`, and `dep_delay_hours` (the departure delay in hours). *Hint: Note you may need to use `mutate()` to make one or more of these variables.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n2.  For each airplane (uniquely identified by `tailnum`), use a `group_by()` paired with `summarize()` to find the sample size, mean, and standard deviation of flight distances. Then include only the top 5 and bottom 5 airplanes in terms of mean distance traveled per flight in the final data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}