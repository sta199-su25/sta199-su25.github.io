{
  "hash": "7b5e56cda5d405ccb56f2d0459333ab3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"AE 09: Importing Data\"\nformat:\n  html:\n    self-contained: true\n---\n\n## Getting started\n\n### Packages\n\nWe will use the following two packages in this application exercise.\n\n-   **tidyverse**: For data import, wrangling, and visualization.\n-   **readxl:** For importing data from Excel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\n```\n:::\n\n\n## Part 1: Hollywood relationships\n\n1.  Load the data from `age-gaps.csv` in your `data` and assign it to `age_gaps`. Confirm that this new object appears in your Environment tab. Click on the *name of the object* in your Environment tab to pop open the data in the data viewer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#code here\n```\n:::\n\n\n2.  Create a subset of the data frame for heterosexual relationships on screen. Save this into a new pipeline.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#code here\n```\n:::\n\n\n3.  Split the data for heterosexual relationships into three -- where woman is older, where man is older, where they are the same age. Save these subsets as three appropriately named data frames. Confirm that these new objects appear in your Environment tab and that the sum of the number of observations in the two new data frames add to the number of observations in the original data frame.\n\n::: callout-note\nIf you are stuck, here is an idea on a process to get started:\n\n-   Use `mutate` to create a variable that tells which case the row has: older woman, older man, or same age\n\n-   `filter` the data frame based on the previously created variable\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code here\n```\n:::\n\n\nWrite the three new datasets you created as `.csv` files in the `data` folder:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code here\n```\n:::\n\n\ns## Part 2: Sales\n\nSales data are stored in an Excel file that looks like the following:\n\n![](https://sta199-s24.github.io/images/sales-excel.png)\n\nRead in the Excel file called `sales.xlsx` from the `data-raw/` folder such that it looks like the following.\n\n![](https://sta199-s24.github.io/images/sales-1.png){width=\"200\"}\n\nFill in the blanks in the following code to accomplish this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales_raw <- read_excel(\n  file_name, \n  skip = ___,\n  col_names = _____\n  )\n```\n:::\n\n\n::: callout-tip\nThe `skip` and `col_names` attributes are **very useful** for reading in messy data!\n\n-   `skip` tells R how many rows at the top of the file the function should ignore\n\n-   `col_names` tells R what to name the columns it imports\n:::\n\n**Stretch goal:** Manipulate the sales data such such that it looks like the following.\n\n![](https://sta199-s24.github.io/images/sales-2.png){width=\"200\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code here\n```\n:::\n\n\nWhy should we bother with writing code for reading the data in by skipping columns and assigning variable names as well as cleaning it up in multiple steps instead of opening the Excel file and editing the data in there to prepare it for a clean import?\n",
    "supporting": [
      "ae-09-github_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}