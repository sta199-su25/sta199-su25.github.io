{
  "hash": "1d677bb119c84254403d863ecbeb86d0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"AE 04: NYC flights + data wrangling\"\nformat:\n  html:\n    self-contained: true\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n:::\n\n\n## NYC Flights\n\n-   To demonstrate data wrangling we will use `flights`, a tibble in the **nycflights13** R package.\n\n-   The data set includes characteristics of all flights departing from New York City (JFK, LGA, EWR) in 2013.\n\n## Exercise 1\n\n**Your turn:** Fill in the blanks:\n\nThe `flights` data frame has \\_\\_\\_ rows.\nEach row represents a \\_\\_\\_.\n\n## Exercise 2\n\n**Your turn:** What are the names of the variables in `flights`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n## Exercise 3 - `select()`\n\n-   Demo: Make a data frame that only contains the variables `dep_delay` and `arr_delay`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   Demo: Make a data frame that keeps every variable except `dep_delay`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   Demo: Make a data frame that includes all variables between `year` through `dep_delay` (inclusive). These are all variables that provide information about the departure of each flight.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   Demo: Use the `select` helper `contains()` to make a data frame that includes the variables associated with the arrival, i.e., contains the string `\"arr\\_\"` in the name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n## Exercise 4 - `slice()`\n\n-   Demo: Display the first five rows of the `flights` data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   Demo: Display the last two rows of the `flights` data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n## Exercise 5 - `arrange()`\n\n-   Demo: Let's arrange the data by departure delay, so the flights with the shortest departure delays will be at the top of the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   Question: What does it mean for the `dep_delay` to have a negative value?\n\nAdd your response here.\n\n-   Demo: Arrange the data by descending departure delay, so the flights with the longest departure delays will be at the top.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   **Your turn:** Create a data frame that only includes the plane tail number (`tailnum`), carrier (`carrier`), and departure delay for the flight with the longest departure delay. What is the plane tail number (`tailnum`) for this flight?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n## Exercise 6 - `filter()`\n\n-   Demo: Filter for all rows where the destination airport is RDU.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   Demo: Filter for all rows where the destination airport is RDU and the arrival delay is less than 0.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   **Your turn:** Describe what the code is doing in words.\n\nAdd response here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(\n    dest %in% c(\"RDU\", \"GSO\"),\n    arr_delay < 0 | dep_delay < 0\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6,203 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      800            810       -10      949            955\n 2  2013     1     1      832            840        -8     1006           1030\n 3  2013     1     1      851            851         0     1032           1036\n 4  2013     1     1      917            920        -3     1052           1108\n 5  2013     1     1     1024           1030        -6     1204           1215\n 6  2013     1     1     1127           1129        -2     1303           1309\n 7  2013     1     1     1157           1205        -8     1342           1345\n 8  2013     1     1     1317           1325        -8     1454           1505\n 9  2013     1     1     1449           1450        -1     1651           1640\n10  2013     1     1     1505           1510        -5     1654           1655\n# ℹ 6,193 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n**Hint:** Logical operators in R:\n\n| operator      | definition                                               |\n|:--------------|:---------------------------------------------------------|\n| `<`           | is less than?                                            |\n| `<=`          | is less than or equal to?                                |\n| `>`           | is greater than?                                         |\n| `>=`          | is greater than or equal to?                             |\n| `==`          | is exactly equal to?                                     |\n| `!=`          | is not equal to?                                         |\n| `x & y`       | is x AND y?                                              |\n| `x | y`      | is x OR y?                                               |\n| `is.na(x)`    | is x NA?                                                 |\n| `!is.na(x)`   | is x not NA?                                             |\n| `x %in% y`    | is x in y?                                               |\n| `!(x %in% y)` | is x not in y?                                           |\n| `!x`          | is not x? (only makes sense if `x` is `TRUE` or `FALSE`) |\n\n## Exercise 7 - `count()`\n\n-   Demo: Create a frequency table of the destination locations for flights from New York.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   Demo: In which month was there the fewest number of flights? How many flights were there in that month?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   **Your turn:** On which date (month + day) was there the largest number of flights? How many flights were there on that day?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n## Exercise 8 - `mutate()`\n\n-   Demo: Convert `air_time` (minutes in the air) to hours and then create a new variable, `mph`, the miles per hour of the flight.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   **Your turn:** First, count the number of flights each month, and then calculate the proportion of flights in each month. What proportion of flights take place in July?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   Demo: Create a new variable, `rdu_bound`, which indicates whether the flight is to RDU or not. Then, for each departure airport (`origin`), calculate what proportion of flights originating from that airport are to RDU.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n## Exercise 9 - `summarize()`\n\n-   Demo: Find mean arrival delay for all flights.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n## Exercise 10 - `group_by()`\n\n-   Demo: Find mean arrival delay for for each month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   **Your turn:** What is the median departure delay for each airports around NYC (`origin`)? Which airport has the shortest median departure delay?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n# Additional Practice\n\nTry these on your own, either in class if you finish early, or after class.\n\n1.  Create a new dataset that only contains flights that do not have a missing departure time. Include the columns `year`, `month`, `day`, `dep_time`, `dep_delay`, and `dep_delay_hours` (the departure delay in hours). *Hint: Note you may need to use `mutate()` to make one or more of these variables.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n2.  For each airplane (uniquely identified by `tailnum`), use a `group_by()` paired with `summarize()` to find the sample size, mean, and standard deviation of flight distances. Then include only the top 5 and bottom 5 airplanes in terms of mean distance traveled per flight in the final data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}