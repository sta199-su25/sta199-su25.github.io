{
  "hash": "561b7373132ad4869a163c93da943bc5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Lab 2\nsubtitle: Data Transformation + Tidying\ncategories: Lab\ndescription: \"Due Wed. May 21 11:59 PM\"\ndraft: false\n---\n\n# Introduction\n\nIn this lab, you'll continue to hone your data science workflow and integrate data visualization, wrangling, and tidying.\n\n::: callout-note\nThis lab assumes you've completed [Lab 0](/lab/lab-0.html) and [Lab 1](/lab/lab-1.html) and doesn't repeat setup and overview content from those labs.\nIf you haven't done those yet, you should review them before starting with this one.\n:::\n\n## Learning objectives\n\nBy the end of the lab, you will...\n\n-   Be able to create transform data using `dplyr`\n-   Build on your mastery of data visualizations using `ggplot2`\n-   Get more experience with data science workflow using R, RStudio, Git, and GitHub\n-   Further your reproducible authoring skills with Quarto\n-   Improve your familiarity with version control using Git and GitHub\n\n## Getting started\n\n### Step 1: Log in to RStudio\n\n-   Go to <https://cmgr.oit.duke.edu/containers> and log in with your Duke NetID and Password.\n-   Click `STA198-199` under My reservations to log into your container. You should now see the RStudio environment.\n\n### Step 2: Clone the repo & start a new RStudio project\n\n-   Go to the course organization at [github.com/sta199-su25](https://github.com/sta199-su25) organization on GitHub.\n    Click on the repo with the prefix **lab-2**.\n    It contains the starter documents you need to complete the lab.\n\n-   Click on the green **CODE** button and select **Use SSH** (this might already be selected by default; if it is, you'll see the text **Clone with SSH**).\n    Click on the clipboard icon to copy the repo URL.\n\n-   In RStudio, go to *File* ➛ *New Project* ➛*Version Control* ➛ *Git*.\n\n-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.\n\n-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.\n\n-   Click *lab-2.qmd* to open the template Quarto file.\n    This is where you will write up your code and narrative for the lab.\n\n### Step 3: Update the YAML\n\nIn `lab-2.qmd`, update the `author` field to your name, render your document, and examine the changes.\nThen, in the Git pane, click on **Diff** to view your changes, add a commit message (e.g., \"Added author name\"), and click **Commit**.\nThen, push the changes to your GitHub repository and, in your browser, confirm that these changes have indeed propagated to your repository.\n\n::: callout-important\nIf you encounter any issues with the above steps, flag a TA for help before proceeding.\n:::\n\n## Packages\n\nIn this lab, we will work with the **tidyverse** package, a collection of packages for performing data analysis in a \"tidy\" way.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n-   **Run** the code cell by clicking on the green triangle (play) button for the code cell labeled `load-packages`. This loads the package so that its features (the functions and datasets in it) are accessible from your *Console*.\n-   Then, **render** the document that loads this package to make its features (the functions and datasets in it) available for other code cells in your Quarto document.\n\n## Guidelines\n\nAs we've discussed in the lecture, your plots should include an informative title, axes and legends should have human-readable labels and aesthetic choices should be carefully considered.\n\nAdditionally, code should follow the [tidyverse style](https://style.tidyverse.org/).\nParticularly,\n\n-   there should be spaces before and line breaks after each `+` when building a `ggplot`,\n\n-   there should also be spaces before and line breaks after each `|>` in a data transformation pipeline,\n\n-   code should be properly indented,\n\n-   there should be spaces around `=` signs and spaces after commas.\n\nFurthermore, all code should be visible in the PDF output, i.e., should not run off the page on the PDF.\nLong lines that run off the page should be split across multiple lines with line breaks.[^1]\n\n[^1]: Remember, haikus, not novellas, when writing code!\n\nAs you complete the lab and other assignments in this course, remember to develop a sound workflow for reproducible data analysis.\nThis assignment will periodically remind you to render, commit, and push your changes to GitHub.\n\n::: callout-important\nYou should have at least 3 commits with meaningful commit messages by the end of the assignment.\n:::\n\n# Part 1: All About Group By\n\n## Question 1\n\nGrouping by one variable.\n\nThe following dataframe is used:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  var_1 = c(10, 20, 30, 40, 50),\n  var_2 = c(\"Pizza\", \"Burger\", \"Pizza\", \"Pizza\", \"Burger\"),\n  var_3 = c(\"Apple\", \"Apple\", \"Pear\", \"Pear\", \"Banana\")\n)\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  var_1 var_2  var_3 \n  <dbl> <chr>  <chr> \n1    10 Pizza  Apple \n2    20 Burger Apple \n3    30 Pizza  Pear  \n4    40 Pizza  Pear  \n5    50 Burger Banana\n```\n\n\n:::\n:::\n\n\na\\.\nWhat does the following code chunk do?\nRun it and analyze the result and articulate in words what `group_by()` does.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2)\n```\n:::\n\n\nb\\.\nWhat does the following code chunk do?\nRun it and analyze the result and articulate in words what the pipeline does.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2) |>\n  summarize(mean_var_1 = mean(var_1))\n```\n:::\n\n\n## Question 2\n\nGrouping by two variables.\n\na\\.\nHow many levels does `var_2` have?\nHow many levels does `var_3`have?\nHow many possible combinations are there of the levels of `var_2` and `var_3`?\n\nb\\.\nWhat does the following code chunk do?\nRun it and analyze the result and articulate in words what the pipeline does.\nThen, comment on what the message says.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2, var_3) |>\n  summarize(mean_var_1 = mean(var_1))\n```\n:::\n\n\nc\\.\nWhat does the following code chunk do?\nRun it and analyze the result and articulate in words what the pipeline does, especially mentioning what the `.groups` argument does.\nHow is the output different from the one in part (a)?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2, var_3) |>\n  summarize(mean_var_1 = mean(var_1), .groups = \"drop\")\n```\n:::\n\n\nd\\.\nWhat do the following pipelines do?\nRun both and analyze their results and articulate in words what each pipeline does.\nHow are the outputs of the two pipelines different?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2, var_3) |>\n  summarize(mean_var_1 = mean(var_1), .groups = \"drop\")\n\ndf |>\n  group_by(var_2, var_3) |>\n  mutate(mean_var_1 = mean(var_1))\n```\n:::\n\n\n{{< pagebreak >}}\n\n# Part 2: Back to the Midwest\n\nYou will revisit and build on some of your findings from Lab 1, where you explored the `midwest` data frame.\nRemember that this data frame is bundled with the **ggplot2** package and is automatically loaded when you load the tidyverse package.\nAs a refresher, the data contains demographic characteristics of counties in the Midwest region of the United States.\nYou can read the documentation for the data set, including variable definitions, by typing `?midwest` in the Console or searching for `midwest` in the Help pane.\n\n## Question 3\n\na\\.\n**In a single pipeline,** calculate the number of counties in each state and display your results in descending order of number of counties.\nWhich state has the highest number of counties, and how many?\nWhich state has the lowest number, and how many?\n\nb\\.\nIn a given state, two counties can't have the same name.\nHowever, across states some county names might be shared.\nA classmate says \"Look at that, there is a county called \\_\\_\\_ in each state in this dataset!\" **In a single pipeline**, discover all counties that could fill in the blank.\n**Your response should be a data frame with only the county names that could fill in the blank and how many times they appear in the dat**a.\n\n## Question 4\n\nReturn to the following box plot of population densities where you were asked to identify at least one outlier.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](lab-2_files/figure-html/popdensity-boxplot-1.png){width=480}\n:::\n:::\n\n\nIn this question, we want you to revisit this box plot and identify the counties described in each section:\n\na\\.\nThe counties with a population density higher than 50,000.\nYour code must use the filter() function.\n\nb\\.\nThe county with the highest population density.\nYour code must use the max() function.\n\nAnswer using **a single pipeline** for each part.\nIn each part, your **response should be a data frame** with **five columns**: county name, state name, population density, total population, and area, **in this order**.\nIf your response has multiple rows**,** the data frame should be **arranged in descending order of population density**.\n\n## Question 5\n\nIn Lab 1 you were also asked to describe the distribution of population densities.\nThe following is one acceptable description that touches on shape, center, and spread of this distribution.\n**In a single pipeline**, calculate the values that should go into the blanks.\nIn words, identify which value corresponds to which blank.\n\n> The distribution of population density of counties is unimodal and extremely right-skewed.\n> A typical Midwestern county has population density of \\_\\_\\_\\_ people per unit area.\n> The middle 50% of the counties have population densities between \\_\\_\\_ to \\_\\_\\_ people per unit area.\n\n::: callout-tip\nThe `quantile()` function will be useful here!\n:::\n\n## Question 6\n\nAnother visualization from Lab 1 was the plot that showed the proportion of urban counties in each state.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](lab-2_files/figure-html/metro-barplot-1.png){width=672}\n:::\n:::\n\n\nCalculate the corresponding proportions **in a single data pipeline**.\n\n## Question 7\n\na\\.\n**In a single pipeline**, calculate the total population for each state and **save the resulting data frame as state_population**.\nThen, **in a separate pipeline,** display it in descending order of total population.\n\nb\\.\n**In a single pipeline**, use the **state_population** data frame made above to calculate the proportion of the total population in each state, displaying the results in descending order of proportion of population.\n\nc\\.\nUse your results from a and b to answer this question: which Midwestern state is most populous and what percent of the Midwest population lives there?\nWhich is the least populous and what percent lives there?\n\n# Part 3: Life Expectancy\n\nIn this part of the lab, you will work with data regarding life expectancy at birth in various countries (and groups of countries) between 1960 and 2023; the data is from the United Nations population division.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_expect <- read_csv(\"data/life_expect_total.csv\")\n```\n:::\n\n\n## Question 8\n\na\\.\nGet to know the data!\nUse the `glimpse()` function and show the result.\nIn writing, how many rows does `life_expect` have and what does each row represent?\nHow many columns does `life_expect` have and what does each column represent?\n\nb\\.\nHigh and low life expectancy: **In a single pipeline**, identify countries with a `2023` life expectancy above 85 or below 55.\nYour response should be a data frame with two columns: `2023` and `country_name`.\n\nc\\.\nGrowing life expectancy: **In a single pipeline**, identify which country had the largest ratio of `2023` life expectancy to `1960` life expectancy.\nYour response should be a data frame with one row and two columns: the ratio and `country_name`.\nDoes this result surprise you?\n\n::: callout-tip\n## Tip\n\nColumn names that are numbers are not considered \"proper\" in R, therefore to work with them you'll need to surround them with backticks, e.g. `` select( ` 1993 ` ) ``.\n:::\n\n## Question 9\n\n**In a single pipeline,** reshape (pivot) `life_expect` such that each row represents a country/year combination, with columns `country_name`,`year`, and `life_expectancy`; **save the result to a new variable.** Then, display the resulting data frame and state how many rows and columns it has.\n\nRequirements:\n\n-   Your code must use one of [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) or [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html).\n    There are other ways you can do this reshaping move in R, but this question requires solving this problem by pivoting.\n\n-   In your `pivot_*()` function, you must use `names_transform = as.numeric` as an argument to force the new `year` column to be numeric.\n\n-   The resulting data frame must be saved as something other than `life_expect` so you (1) can refer to this data frame later in your analysis and (2) do not overwrite `life_expect`.\n    Use a short but informative name.\n\n## Question 10\n\na\\.\nCreate a vector called `countries_of_interest` which contains the names of up to five countries you want to visualize the life expectancy for over the years.\nFor example, if these countries are Germany and United States, you can do this as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries_of_interest <- c(\"Germany\", \"United States\")\n```\n:::\n\n\nThen, in 1-2 sentences, state why you chose these countries!\n\nb\\.\n**In a single pipeline**, filter your reshaped dataset from question 10 to include only the `countries_of_interest` from part (a) and **save the resulting data frame with a new name**.\n**Do not overwrite the data frame** you're starting with.\nUse a short but informative name.\n**Then, in a new pipeline**, find the `distinct()` countries in the data frame you created.\n\n::: callout-tip\nThe number of distinct countries in the filtered data frame you created in part (b) should equal the number of countries you chose in part (a).\nIf it doesn't, you might have misspelled a country name or made a mistake in filtering for these countries.\nGo back and correct your work.\n:::\n\n## Question 11\n\nUsing your data frame from the previous question, **create a plot of life expectancy (y) vs. year (x) for these countries**.\nIn a few sentences, describe the patterns you observe in the plot, particularly focusing on anything you find surprising or not surprising, based on your knowledge (or lack thereof) of these countries.\n\nRequirements for the plot:\n\n-   Data should be represented with **points** as well as **lines connecting the points** for each country (Note: lines should be directly connecting points, not smooth through them).\n\n-   Each **country** should be represented by a **different color line** and **different color and shape points**.\n\n-   **Axes and legend** should be properly **labeled**.\n\n-   The plot should have an **appropriate title** (and optionally a subtitle).\n\n-   Plot should be **customized in at least one additional way** -- you could use a different than default color scale, or different than default theme, or some other customization.\n\n## Question 12\n\nBriefly explain why the pivot in question 9 was necessary for creating the plot in question 11.\n",
    "supporting": [
      "lab-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}