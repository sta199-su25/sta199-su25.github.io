---
title: "AE 14: Building a spam filter"
---

In this application exercise, we will

-   Use logistic regression to fit a model for a binary response variable
-   Fit a logistic regression model in R
-   Use a logistic regression model for classification

To illustrate logistic regression, we will build a spam filter from email data.

The data come from incoming emails in David Diez's (one of the authors of OpenIntro textbooks) Gmail account for the first three months of 2012.
All personally identifiable information has been removed.

```{r}
#| label: load-packages
#| message: false

library(tidyverse)
library(tidymodels)
library(openintro)
```

```{r}
glimpse(email)
```

The variables we'll use in this analysis are

-   `spam`: 1 if the email is spam, 0 otherwise
-   `exclaim_mess`: The number of exclamation points in the email message

**Goal:** Use the number of exclamation points in an email to predict whether or not it is spam.

# Exercises

## Exercise 1

Let's start with some exploratory analysis:

a.  Create an density plot to investigate the relationship between `spam` and `exclaim_mess`.

```{r}
ggplot(email, aes(x = exclaim_mess, fill = spam)) + 
  geom_density()
```

b.  Additionally, calculate the mean number of exclamation points for both spam and non-spam emails.

```{r}
email |>
  group_by(spam) |>
  summarize(mean_ep = mean(exclaim_mess))
```

## Exericse 2

Visualize a linear model fit for these data:

```{r}
ggplot(email, aes(x = exclaim_mess, y = as.numeric(spam) - 1)) + 
  geom_point() + 
  geom_smooth(method = "lm") +
  labs(
    x = "# of exclamation marks in email",
    y = "e-mail type"
  ) +
  scale_y_continuous(breaks = c(0, 1),
                   labels = c("legit (0)", "spam (1)"))
```

Is the linear model a good fit for the data?
Why or why not?

*Add response here.*

## Exercise 3

a.  Fit the logistic regression model using the number of exclamation points to predict the probability an email is spam:

```{r}
log_fit <- logistic_reg() |>
  fit(spam ~ exclaim_mess, data = email)

tidy(log_fit)
```

b.  Add your estimates to the fitted equation below

$$\log\Big(\frac{\hat{p}}{1-\hat{p}}\Big) = -2.27 + 0.00027 \times exclaim\_mess$$

c. How does the code above differ from previous code we've used to fit regression models? 

**Ans**: `linear_reg` is changed to `logistic_reg`. Things are otherwise unchanged.


## Exercise 4

a.  What is the probability the email is spam if it contains 10 exclamation points? Answer the question using the `predict()` function.

```{r}
new_email <- tibble(
  exclaim_mess = 10
  )

predict(log_fit, new_data = new_email, type = "prob")
```

b.  A probability is nice, but we want an actual decision. Classify the darn email.

```{r}
predict(log_fit, new_data = new_email, type = "class")
```

## Exercise 5

a.  Fit a model with three variables of your choosing in the dataset as predictors.

```{r}
# answers may vary
```

b.  Fit a model with **all** variables in the dataset as predictors.

```{r}
log_fit2 <- logistic_reg() |>
  fit(spam ~ ., data = email)
```

c.  If you used this model to classify the emails in the dataset, how would it do? Use the fitted model to classify each email in the dataset, and then calculate the classification error rates (TP, TN, FP, FN).

```{r}
log_aug <- augment(log_fit2, email)


log_aug |>
  count(spam, .pred_class) |>
  group_by(spam) |>
  mutate(p = n / sum(n))
```
