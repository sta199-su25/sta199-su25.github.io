---
title: "AE 06: Tidying Stat Sci"
subtitle: "Suggested answers"
format:
  html:
    self-contained: true
---

## Goal

Our ultimate goal in this application exercise is to make the following data visualization.

![](https://sta199-s24.github.io/images/statsci-plot.png){fig-alt="Line plot of numbers of Statistical Science majors over the years (2011 - 2021). Degree types represented are BS, BS2, AB, AB2. There is an increasing trend in BS degrees and somewhat steady trend in AB degrees." fig-align="center"}

## Data

The data come from the [Office of the University Registrar](https://registrar.duke.edu/registration/enrollment-statistics).
They make the data available as a table that you can download as a PDF, but I've put the data exported in a CSV file for you.
Let's load that in.

```{r}
#| label: load-packages-data
#| message: false

library(tidyverse)

statsci <- read_csv("data/statsci.csv")
```

And let's take a look at the data.

```{r}
statsci
```

## Pivoting

-   **Demo:** Pivot the `statsci` data frame *longer* such that each row represents a degree type / year combination and `year` and `n`umber of graduates for that year are columns in the data frame.

```{r}
#| label: pivot

statsci |>
  pivot_longer(
    cols = -degree,
    names_to = "year",
    values_to = "n"
  )

```

-   **Question:** What is the type of the `year` variable? Why? What should it be?

*Add your response here.*

-   **Demo:** Start over with pivoting, and this time also make sure `year` is a numerical variable in the resulting data frame.

```{r}
#| label: pivot-with-transform

statsci|>pivot_longer(
  cols =-degree,
  names_to = "year",
  names_transform = as.numeric,
  values_to = "n"
)
```

-   **Demo:** Now, repeat your code from above, but this time save the result to a new variable name.

```{r}
#| label: pivot-with-transform-name

statsci_longer <- statsci |>
  pivot_longer(
    cols = -degree,
    names_to = "year",
    names_transform = as.numeric,
    values_to = "n"
  )
```

-   **Question:** What does an `NA` mean in this context? *Hint:* The data come from the university registrar, and they have records on every single graduates, there shouldn't be anything "unknown" to them about who graduated when.

*Add your response here.*

-   **Demo:** Start a new pipeline using the saved pivotted data frame and convert `NA`s in `n` to `0`s.

```{r}
#| label: convert-na

statsci_longer |>
  mutate(n = if_else(is.na(n), 0, n ))
```

-   **Demo:** In our plot the degree types are BS, BS2, AB, and AB2. This information is in our dataset, in the `degree` column, but this column also has additional characters we don't need. Create a new column called `degree_type` with levels BS, BS2, AB, and AB2 (in this order) based on `degree`. Do this by adding on to your pipeline from earlier.

```{r}
#| label: degree-type
statsci_longer |>
  mutate(n = if_else(is.na(n), 0, n)) |>
    separate(degree, sep = " \\(", into = c("major", "degree_type")) |>
    mutate(
      degree_type = str_remove(degree_type, "\\)"),
      degree_type = fct_relevel(degree_type, "BS", "BS2", "AB", "AB2")
      )
```

-   **Your turn:** Now we start making our plot, but let's not get too fancy right away. Create the following plot, which will serve as the "first draft" on the way to our [Goal]. Do this by adding on to your pipeline from earlier.

![](images/stat-sci-plot-new.png)

```{r}
#| label: plot-draft

statsci_longer |>
  mutate(n = if_else(is.na(n), 0, n)) |>
    separate(degree, sep = " \\(", into = c("major", "degree_type")) |>
    mutate(
      degree_type = str_remove(degree_type, "\\)"),
      degree_type = fct_relevel(degree_type, "BS", "BS2", "AB", "AB2")
      )|>
  ggplot(aes(x = year, y = n, color = degree_type)) +
  geom_point() +
  geom_line()
```

-   **Your turn:** What aspects of the plot need to be updated to go from the draft you created above to the [Goal] plot at the beginning of this application exercise.

*Add your response here.*

-   **Demo:** Update x-axis scale such that the years displayed go from 2011 to 2023 in increments of 2 years. Do this by adding on to your pipeline from earlier.

```{r}
#| label: plot-improve-1

statsci_longer |>
  mutate(n = if_else(is.na(n), 0, n)) |>
    separate(degree, sep = " \\(", into = c("major", "degree_type")) |>
    mutate(
      degree_type = str_remove(degree_type, "\\)"),
      degree_type = fct_relevel(degree_type, "BS", "BS2", "AB", "AB2")
      )|>
  ggplot(aes(x = year, y = n, color = degree_type)) +
  geom_point() +
  geom_line() +
  scale_x_continuous(breaks = seq(2011, 2024, 2))
```

-   **Demo:** Update line colors using the following level / color assignments. Once again, do this by adding on to your pipeline from earlier.
    -   "BS" = "cadetblue4"

    -   "BS2" = "cadetblue3"

    -   "AB" = "lightgoldenrod4"

    -   "AB2" = "lightgoldenrod3"

```{r}
#| label: plot-improve-2

statsci_longer |>
  mutate(n = if_else(is.na(n), 0, n)) |>
    separate(degree, sep = " \\(", into = c("major", "degree_type")) |>
    mutate(
      degree_type = str_remove(degree_type, "\\)"),
      degree_type = fct_relevel(degree_type, "BS", "BS2", "AB", "AB2")
      )|>
  ggplot(aes(x = year, y = n, color = degree_type)) +
  geom_point() +
  geom_line() +
  scale_x_continuous(breaks = seq(2011, 2024, 2))+
  scale_color_manual(
    values = c("BS" = "cadetblue4", 
               "BS2" = "cadetblue3", 
               "AB" = "lightgoldenrod4", 
               "AB2" = "lightgoldenrod3"))
```

-   **Your turn:** Update the plot labels (`title`, `subtitle`, `x`, `y`, and `caption`) and use `theme_minimal()`. Once again, do this by adding on to your pipeline from earlier.

```{r}
#| label: plot-improve-3

statsci_longer |>
  mutate(n = if_else(is.na(n), 0, n)) |>
    separate(degree, sep = " \\(", into = c("major", "degree_type")) |>
    mutate(
      degree_type = str_remove(degree_type, "\\)"),
      degree_type = fct_relevel(degree_type, "BS", "BS2", "AB", "AB2")
      )|>
  ggplot(aes(x = year, y = n, color = degree_type)) +
  geom_point() +
  geom_line() +
  scale_x_continuous(breaks = seq(2011, 2024, 2))+
  scale_color_manual(
    values = c("BS" = "cadetblue4", 
               "BS2" = "cadetblue3", 
               "AB" = "lightgoldenrod4", 
               "AB2" = "lightgoldenrod3"))+
  labs(
    x = "Graduation year",
    y = "Number of majors graduating",
    color = "Degree type",
    title = "Statistical Science majors over the years",
    subtitle = "Academic years 2011 - 2023",
    caption = "Source: Office of the University Registrar\nhttps://registrar.duke.edu/registration/enrollment-statistics"
  ) +
  theme_minimal()
```

-   **Demo:** Finally, adding to your pipeline you've developed so far, move the legend into the plot, make its background white, and its border gray. Set `fig-width: 7` and `fig-height: 5` for your plot in the chunk options. This will be `#| fig-wdith: 7` and `#| fig-heigh: 5` below your label. It will not show up in the rendered code chunk, but you can see the plot size.

```{r}
#| label: plot-improve-4
#| fig-wdith: 7
#| fig-heigh: 5

# add your code here
```

## Let's now pivot wider!

-   **Demo** Just like you can pivot longer, you can pivot wider. Let's convert our long data frame back to the wide one in a single pipeline.

```{r}
#| label: wider

statsci_longer |>
  pivot_wider(names_from = year, 
              values_from = n)
```
