---
title: "AE 15: Forest classification"
---

In this application exercise, we will

-   Split our data into testing and training
-   Fit logistic regression regression models to testing data to classify outcomes
-   Evaluate performance of models on testing data

We will use **tidyverse** and **tidymodels** for data exploration and modeling, respectively, and the **forested** package for the data.

```{r}
#| label: load-packages
#| message: false
library(tidyverse)
library(tidymodels)
library(forested)
```

Remember from the lecture that the `forested` dataset contains information on whether a plot is forested (`Yes`) or not (`No`) as well as numerical and categorical features of that plot.

```{r}
#| label: glimpse-forested
glimpse(forested)
```

# Spending your data

Split your data into testing and training in a reproducible manner and display the split object.

```{r}
#| label: train-test-split
set.seed(1234)
forested_split <- initial_split(forested)
forested_split
```

Now, save your training and testing data as their own data frames. 

```{r}
#| label: train-test-save
forested_train <- training(forested_split)
forested_test <- testing(forested_split)
```

# Exploratory data analysis

Create some visualizations to explore the data! This can help you determine which predictors you want to include in your model.

**Note:** Pay attention to which dataset you use for your exploration.

This is a plot that explores latitude and longitude - it's different from anything we have seen so far!

```{r}
#| label: eda-plot
ggplot(forested_train, aes(x = lon, y = lat, color = forested)) +
  geom_point(alpha = 0.7) +
  scale_color_manual(values = c("Yes" = "forestgreen", "No" = "gold2")) +
  theme_minimal()
```
```{r}

# add some other plots here!

```


# Model 1: Custom choice of predictors

## Fit

Fit a model for classifying plots as forested or not based on a subset of predictors of your choice. Name the model `forested_custom_fit` and display a tidy output of the model.

```{r}
#| label: forested-custom-fit
#| eval: false

forested_custom_fit <- logistic_reg() |>
  fit(_____ ~ ____________, 
      data = __________)

tidy(forested_custom_fit)
```

## Predict

Predict for the testing data using this model.

```{r}
#| label: forested-custom-aug
#| eval: false

forested_custom_aug <- _________(forested_custom_fit, new_data = _______)

forested_custom_aug
```

## Evaluate

Calculate the false positive and false negative rates for the testing data using this model.

```{r}
#| label: forested-custom-eval
#| eval: false

forested_custom_aug |>
  count(.pred_class, forested) |>
  arrange(forested) |>
  group_by(forested) |>
  mutate(
    p = round(n / sum(n), 2),
    decision = case_when(
      .pred_class == "Yes" & forested == "Yes" ~ "True positive",
      .pred_class == "Yes" & forested == "No" ~ "False positive",
      .pred_class == "No" & forested == "Yes" ~ "False negative",
      .pred_class == "No" & forested == "No" ~ "True negative"
    )
  )
```

Another commonly used display of this information is a confusion matrix. Create this using the `conf_mat()` function. 

```{r}
#| label: conf-mat-custom
#| eval: false

conf_mat(
  forested_custom_aug, 
  truth = forested, 
  estimate = .pred_class
)
```

## Sensitivity, specificity, ROC curve

Calculate sensitivity and specificity and draw the ROC curve.

```{r}
#| label: forested-custom-roc
#| eval: false
forested_custom_roc <- roc_curve(forested_custom_aug, 
                                 truth = ____,  # column with truth
                                 _____, # column with y = 1 preds
                                 event_level = _____) # factor level for y = 1

forested_custom_roc
```

```{r}
#| eval: false
ggplot(forested_custom_roc, aes(x = 1 - ______, y = ______)) +
  geom_path() + # draws line
  geom_abline(lty = 3) + # x = y line
  coord_equal() # makes square
```

# Model 2: All predictors

## Fit

Fit a model for classifying plots as forested or not based on all predictors available. Name the model `forested_full_fit` and display a tidy output of the model.

```{r}
#| label: forested-full-fit
#| eval: false
forested_full_fit <- logistic_reg() |>
  fit(_________ ~ ________, data = _________)

tidy(forested_full_fit)
```

## Predict

Predict for the testing data using this model.

```{r}
#| label: forested-full-aug
#| eval: false
forested_full_aug <- augment(____________, new_data = ________)

forested_full_aug
```

## Evaluate

Calculate the false positive and false negative rates for the testing data using this model.

```{r}
#| label: forested-full-eval
#| eval: false
forested_full_aug |>
  count(.pred_class, forested) |>
  arrange(forested) |>
  group_by(forested) |>
  mutate(
    p = round(n / sum(n), 2),
    decision = case_when(
      .pred_class == "Yes" & forested == "Yes" ~ "True positive",
      .pred_class == "Yes" & forested == "No" ~ "False positive",
      .pred_class == "No" & forested == "Yes" ~ "False negative",
      .pred_class == "No" & forested == "No" ~ "True negative"
    )
  )
```

## Sensitivity, specificity, ROC curve

Calculate sensitivity and specificity and draw the ROC curve.

```{r}
#| label: forested-full-roc
#| eval: false
forested_full_roc <- roc_curve(forested_full_aug, 
                               truth = ____,  # column with truth
                                 _____, # column with y = 1 preds
                                 event_level = _____ # factor level for y = 1
                               ) 

forested_full_roc
```

```{r}
#| eval: false
ggplot(forested_full_roc, aes(x = 1 - _______, y = ______)) +
  geom_path() + # draws line
  geom_abline(lty = 3) + # x = y line
  coord_equal() #makes plot square
```

# Model 1 vs. Model 2

lot both ROC curves and articulate how you would use them to compare these models.

First, add a column to each roc data.
```{r}
#| label: compare
#| eval: false
forested_custom_roc <- forested_custom_roc |>
  mutate(model = "Custom")

forested_full_roc <- forested_full_roc |>
  mutate(model = "Full")
```

Next, combine data.
```{r}
#| eval: false
roc_combined <- bind_rows(forested_custom_roc, forested_full_roc) 
```

Now, plot!

```{r}
#| eval: false
___________ |>
  ggplot(aes(x = 1 - specificity, y = sensitivity, color = model)) +
  geom_path() + # draws line
  geom_abline(lty = 3) + # adds x = y line
  coord_equal() # makes square
```

The full model looks better. We can quantify this comparison with the area under the curve:

```{r}
#| eval: false

# same as roc_curve, but roc_auc

full_roc_auc <- _______ (
  forested_full_aug, 
  truth = forested, 
  .pred_Yes, 
  event_level = "first"
)

# same as roc_curve, but roc_auc
custom_roc_auc <- _______ (
  forested_custom_aug, 
  truth = forested, 
  .pred_Yes, 
  event_level = "first"
)

full_roc_auc
custom_roc_auc
```
