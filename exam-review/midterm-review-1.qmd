---
title: Midterm 1 Practice Questions
subtitle: Part 1
---

::: {.callout-tip collapse="true"}
## Solutions

Coming later - try them yourself first!!!
:::

::: {.callout-tip collapse="true"}
## Help

Use Ed or office hours for getting help with these practice questions - avoid emails!
:::

```{r}
#| include: false
library(tidyverse)
library(scales)
library(palmerpenguins)
library(nycflights13)
library(gt)
library(openintro)
library(janitor)
library(knitr)
#theme_set(theme_bw(base_size = 12))
```

## Penguins

The `penguins` data set includes measurements for penguin species, including: flipper length, body mass, bill dimensions, and sex.
The following table summarizes information on which species of penguins (Adelie, Gentoo, and Chinstrap) live on which islands (Biscoe, Dream, or Torgersen).

```{r}
#| label: penguins-species-island-table
#| echo: false

penguins |>
  count(island, species) |>
  pivot_wider(names_from = species, values_from = n, values_fill = 0) |>
  rename(Island = island) |>
  janitor::adorn_totals(where = c("row", "col")) |>
  gt() |>
  cols_align(align = "right")
```

### Question 1

Which of the following plots is the result of the following code?

```{r}
#| label: penguins-species-island-bar-code
#| fig-show: hide

ggplot(penguins, aes(x = island, fill = species)) + 
  geom_bar()
```

```{r}
#| label: penguins-species-island-bar-plots
#| layout-ncol: 2
#| fig-width: 5
#| fig-asp: 0.6
#| echo: false

ggplot(penguins, aes(x = island, fill = species)) + 
  geom_bar(position = "fill", color = "black") +
  labs(title = "(a)", x = "Island", y = "Proportion", fill = "Species") +
  scale_fill_grey(start = 0.8, end = 0)

ggplot(penguins, aes(fill = island, x = species)) + 
  geom_bar(position = "fill", color = "black") +
  labs(title = "(b)", fill = "Island", y = "Proportion", x = "Species") +
  scale_fill_grey(start = 0.8, end = 0)

ggplot(penguins, aes(fill = island, y = species)) + 
  geom_bar(position = "fill", color = "black") +
  labs(title = "(c)", fill = "Island", x = "Proportion", y = "Species") +
  scale_fill_grey(start = 0.8, end = 0)

ggplot(penguins, aes(x = island, fill = species)) + 
  geom_bar(color = "black") +
  labs(title = "(d)", x = "Island", fill = "Species", y = "Count") +
  scale_fill_grey(start = 0.8, end = 0)

ggplot(penguins, aes(fill = island, y = species)) + 
  geom_bar(color = "black") +
  labs(title = "(e)", fill = "Island", y = "Species", x = "Count") +
  scale_fill_grey(start = 0.8, end = 0)
```

## NYC Flights

The `flights` dataset includes characteristics of all flights departing from New York City airports (JFK, LGA, EWR) in 2013.
Below is a peek at the first ten rows of the `flights` data.

```{r}
#| label: flights-glimpse
#| echo: false

flights |>
  relocate(year, month, day, arr_delay, carrier)
```

### Question 2

Based on this output, which of the following must be [**true**]{.underline} about the `flights` data frame?
**Select all that are true.**

a.  The `flights` data frame has 10 rows.

b.  The `flights` data frame has 8 columns.

c.  The `carrier` variable in the `flights` data frame is a character variable.

d.  There are no missing data in the `flights` data frame.

### Question 3

Which of the following pipelines produce(s) the output shown below?
**Select all that apply.**

```{r}
#| label: flights-pipeline
#| echo: false

flights |>
  select(arr_delay, carrier, year, month, day) |>
  arrange(desc(arr_delay))
```

a\.

```{r}
#| echo: true
#| eval: false
flights |>
  select(arr_delay, carrier, year, month, day) |>
  arrange(desc(arr_delay))
```

b\.

```{r}
#| label: flights-pipeline-alt-1
#| eval: false
#| echo: true

flights |>
  select(arr_delay, carrier, year, month, day) |>
  arrange(arr_delay)
```

c\.

```{r}
#| label: flights-pipeline-alt-2
#| eval: false
#| echo: true

flights |>
  select(arr_delay, carrier, year, month, day) |>
  arrange(year)
```

d\.

```{r}
#| label: flights-pipeline-alt-3
#| eval: false
#| echo: true
flights |>
  arrange(desc(arr_delay)) |>
  select(arr_delay, carrier, year, month, day)
```

e\.

```{r}
#| label: flights-pipeline-alt-4
#| eval: false
#| echo: true
flights |>
  arrange(desc(arr_delay)) |>
  select(day, month, year, arr_delay, carrier)
```

## Countries and populations

```{r}
#| label: load-pop-data
#| echo: false
#| message: false

population_raw <- read_csv("https://sta199-s24.github.io/data/world-pop-2022.csv")
continents_raw <- read_csv("https://sta199-s24.github.io/data/continents.csv")
```

```{r}
#| label: prep-pop-data
#| echo: false

set.seed(12345)
population <- population_raw |>
  sample_n(size = 6) |>
  select(!year) |>
  arrange(country)
continents <- continents_raw |>
  select(!year) |>
  semi_join(population, join_by(entity == country)) |>
  slice_head(n = 4) |>
  bind_rows(tibble(entity = "Angola", code = "AGO", continent = "Africa")) |>
  arrange(entity)
```

We have a small dataset of six countries and their populations:

```{r}
population
```

And another small dataset of five countries and the continent they're in:

```{r}
continents
```

You join the two datasets with the following:

```{r}
#| label: join-code
#| results: hide

population |>
  left_join(continents, by = join_by(country == entity))
```

### Question 4

How many rows will the resulting data frame have?

a.  4
b.  5
c.  6
d.  7
e.  8

### Question 5

What will be the columns of the resulting data frame?

a.  `country`, `population`

b.  `country`, `population`, `code`, `continent`

c.  `entity`, `code`, `continent`

d.  `entity`, `population`, `code`, `continent`

e.  `country`, `entity`, `population`, `code`, `continent`

## Duke Forest houses

The `duke_forest` dataset includes information on prices and various other features (number of bedrooms, bathrooms, area, year built, type of cooling, type of heating, etc.) of houses in the Duke Forest neighborhood of Durham, NC.

```{r}
glimpse(duke_forest)
```

The following summary table gives us some information about whether homes in this data set have garages and when they were built.

```{r}
#| label: duke-forest
#| echo: false

duke_forest <- duke_forest |>
  mutate(
    parking = if_else(str_detect(parking, "Garage"), "Garage", "No garage"),
    year_built_cat = if_else(year_built < 1950, "Built earlier than 1950", "Built in 1950 or later")
  )

duke_forest |>
  count(parking, year_built_cat) |>
  pivot_wider(names_from = year_built_cat, values_from = n, values_fill = 0) |>
  rename(" " = "parking") |>
  gt()
```

The pipeline below produces a data frame with a fewer number of rows than `duke_forest`.

```{r}
#| label: duke-forest-pipeline-blanks
#| eval: false

duke_forest |>
  filter(parking == "Garage" _(1)_ year_built _(2)_ 1950) |>
  select(parking, year_built, price, area) |>
  _(3)_(price_per_sqfeet = price / area)
```

```{r}
#| label: duke-forest-pipeline
#| echo: false

duke_forest |>
  filter(parking == "Garage" & year_built < 1950) |>
  select(parking, year_built, price, area) |>
  mutate(price_per_sqfeet = price / area)
```

### Question 6

Which of the following goes in blanks (1) and (2)?

|     | \(1\) | \(2\) |
|-----|:-----:|:-----:|
| a\. |  `&`  |  `<`  |
| b\. |  `|`  |  `<`  |
| c\. |  `&`  | `>=`  |
| d\. |  `|`  | `>=`  |
| e\. |  `&`  | `!=`  |

### Question 7

Which function or functions go into blank (3)?
**Select all that apply.**

a.  `arrange()`

b.  `mutate()`

c.  `filter()`

d.  `summarize()`

e.  `slice()`

## Law & Order

You've heard of the tidyverse, now let's visit the Law & Order-verse.
Doink doink![^1]

[^1]: "Doink doink" is the scene and episode introductory sound on the Law & Order series.
    If you've never heard it, you're not at any disadvantage for the exam.
    If you've ever heard it, good luck getting it out of your head!

Law & Order is a police procedural and legal drama television series that has been running since the 1990s.
The Law & Order franchise includes a number of series such as Law & Order, Law & Order: SVU, Law & Order: Criminal Intent, etc.

You will work with data on average ratings for each season of three series from the Law & Order-verse -- a subset of the data from the previous questions.
Below is a peek at the first ten rows of the Law & Order data.

```{r}
#| echo: false
#| message: false
tv <- read_csv("data/tv.csv")
law_and_order <- tv |>
  filter(str_detect(title, "Law & Order"))
```

The plot below shows the distributions of average ratings of various Law & Order series across seasons.

```{r}
#| echo: false
#| fig-asp: 0.35
#| fig-width: 8

law_and_order |>
  mutate(title = str_replace(title, "Law & Order: ", "Law & Order:\n")) |>
  ggplot(aes(x = av_rating, y = fct_rev(title))) +
  geom_boxplot(alpha = 0.5, show.legend = FALSE, outlier.size = 2) +
  labs(x = "Average rating", y = "Series title")
```

### Question 8

Based on the information from the side-by-side box plots, fill in the legend of the plot below with Law & Order series titles.

```{r}
#| echo: false
#| fig-asp: 0.35
#| fig-width: 8
#| warning: false

ggplot(law_and_order, aes(x = season, y = av_rating, shape = title)) +
  geom_line(linewidth = 0.3) +
  geom_point(size = 3) +
  scale_shape_manual(
    values = c("Law & Order: SVU" = "triangle", 
               "Law & Order: Criminal Intent" = "diamond", 
               "Law & Order: True Crime" = "square", 
               "Law & Order" = "asterisk", 
               "Law & Order: LA" = "circle"), 
    labels = c("__________________________________",
               "__________________________________",
               "__________________________________",
               "__________________________________",
               "__________________________________")
  ) +
  labs(
    x = "Season",
    y = "Average rating",
    shape = "Series title"
  ) +
  theme(legend.key.height = unit(1.25, "cm"))
```

### Question 9

The following code calculates the standard deviations of average season ratings of the five Law & Order series.
Unfortunately, the output is partially erased and replaced with blanks.

::: callout-tip
Standard deviation is a measure of variation in the data.
A higher standard deviation indicates the data has more variation; a lower standard deviation indicates less variation.
:::

```{r}
#| results: hide

lo_titles <- c("Law & Order", "Law & Order: Criminal Intent", "Law & Order: SVU")

law_and_order |>
  filter(title %in% lo_titles) |>
  group_by(title) |>
  summarize(mean_av_rating = mean(av_rating), sd_av_rating = sd(av_rating))
```

```         
# A tibble: 5 × 3
  title                         mean_av_rating sd_av_rating
  <chr>                                  <dbl>        <dbl>
1 Law & Order                            _(1)_        0.106
2 Law & Order: Criminal Intent            8.20        0.129
4 Law & Order: SVU                        8.67        _(2)_
```

Based on the visualizations you've seen of these data so far, which of the following is [**true**]{.underline} about the blanks in the output?
**Select all that are true.**

a.  The **mean** of average ratings (Blank 1) of Law & Order seasons is **lower** than the other two means.

b.  The **mean** of average ratings (Blank 1) of Law & Order seasons is **higher** than the other two means.

c.  The **standard deviation** of average ratings of Law & Order: SVU seasons (Blank 2) is **lower** than the other two standard deviations.

d.  The **standard deviation** of average ratings of Law & Order: SVU seasons (Blank 2) is **higher** than the other two standard deviations.

e.  The **standard deviation** of average ratings of Law & Order: SVU seasons (Blank 2) is **between** the other two standard deviations.

## Romance and comedy

Finally, we focus on romance and comedy shows.
We first filter the dataset for any shows that have romance or comedy as their genre (`genre_1`, `genre_2`, or `genre_3`) and then remove shows that have both of these genre labels.
For the next two questions, we focus on these shows that we identify as either romance or comedy.
We then calculate the mean of the average season ratings for each show, to obtain a single "mean average rating" value per show.

```{r}
#| echo: false

romance_shows <- tv |>
  filter(genre_1 == "Romance" | genre_2 == "Romance" | genre_3 == "Romance") |>
  distinct(title) |>
  pull()

comedy_shows <- tv |>
  filter(genre_1 == "Comedy" | genre_2 == "Comedy" | genre_3 == "Comedy") |>
  distinct(title) |>
  pull()

romance_comedy <- tv |>
  filter(title %in% c(romance_shows, comedy_shows)) |>
  filter(!(title %in% romance_shows & title %in% comedy_shows)) |>
  mutate(
    genre = if_else(title %in% romance_shows, "Comedy", "Romance")
  ) |>
  select(-genre_1, -genre_2, -genre_3)

romance_comedy_means <- romance_comedy |>
  group_by(genre, title) |>
  summarize(mean_av_rating = mean(av_rating), .groups = "drop")
```

The plot below shows the distributions of mean average ratings of seasons of comedy and romance shows.

```{r}
#| echo: false
#| fig-asp: 0.6

ggplot(romance_comedy_means, aes(x = mean_av_rating, fill = genre)) +
  geom_histogram(binwidth = 0.25, show.legend = FALSE, color = "white") +
  facet_wrap(~genre, nrow = 2) +
  labs(x = "Mean average rating", y = "Count") +
  scale_fill_grey(start = 0.2, end = 0.6)
```

### Question 10

Which of the following statements is [**true**]{.underline} about these distributions?
**Select all that are true.**

a.  Mean average ratings of romance shows are bimodal.
b.  Mean average ratings of comedy are unimodal.
c.  Mean average ratings of romance shows is left skewed.
d.  Mean average ratings of comedy shows is right skewed.
e.  There are more romance shows than comedy shows.

## IMDB

The data for the next few questions come from the Internet Movie Database (IMDB).
Specifically, the data are a random sample of movies released between 1980 and 2020.

```{r}
#| label: load-data
#| message: false
movies <- read_csv("data/movies.csv")
```

The name of the data frame used for this analysis is `movies`, and it contains the variables shown in @tbl-data-dictionary.

\setcounter{table}{0}

| Variable          | Description                                                             |
|------------------------|------------------------------------------------|
| `name`            | name of the movie                                                       |
| `rating`          | rating of the movie (R, PG, etc.)                                       |
| `genre`           | main genre of the movie.                                                |
| `runtime`         | duration of the movie                                                   |
| `year`            | year of release                                                         |
| `release_date`    | release date (YYYY-MM-DD)                                               |
| `release_country` | release country                                                         |
| `score`           | IMDB user rating                                                        |
| `votes`           | number of user votes                                                    |
| `director`        | the director                                                            |
| `writer`          | writer of the movie                                                     |
| `star`            | main actor/actress                                                      |
| `country`         | country of origin                                                       |
| `budget`          | the budget of a movie (some movies don't have this, so it appears as 0) |
| `gross`           | revenue of the movie                                                    |
| `company`         | the production company                                                  |

: Data dictionary for `movies` {#tbl-data-dictionary tbl-colwidths="\[20,80\]"}

The first thirty rows of the `movies` data frame are shown in @tbl-data, with variable types suppressed (since we'll ask about them later).

```{r}
#| echo: false
movies_to_mark <- c("Blue City", "Rang De Basanti", "Winter Sleep")

movies <- movies |>
  mutate(
    mark = if_else(name %in% movies_to_mark, TRUE, FALSE),
    rating = case_when(
      rating == "TV-PG" ~ "PG",
      rating == "Unrated" ~ "Not Rated",
      is.na(rating) ~ "Not Rated",
      .default = rating
    ),
    rating = fct_relevel(rating, "G", "PG", "PG-13", "R", "NC-17", "Not Rated")
  ) |>
  arrange(desc(mark)) |>
  relocate(name, score, runtime, genre, rating, release_country, release_date, budget, gross, votes, year, director, writer, star, company, country)
```

::: {#tbl-data}
First 30 rows of `movies`, with variable types suppressed.

```{r}
#| echo: false
options(
  dplyr.print_min = 30,
  pillar.min_chars = 13,
  pillar.width = 110,
  pillar.sigfig = 6
)

format(movies |> select(!c(mark)))[-3L] |>
  str_remove_all(" <.*?>") |>
  cat(sep = "\n")

options(
  dplyr.print_min = 10,
  pillar.min_chars = 8,
  pillar.width = 80,
  pillar.sigfig = 3
)
```
:::

### Question 11

The `name` and `runtime` variables are shown below, with the variable types suppressed.

::: {layout="[0.5, 0.5]"}
::: {#firstcol}
```{r}
#| eval: false
movies |>
  select(name, runtime)
```

```{r}
#| echo: false

options(dplyr.print_min = 6)

format(as_tibble(movies |> select(name, runtime)))[-3L] |>
  str_remove_all(" <.*?>") |>
  cat(sep = "\n")

options(dplyr.print_min = 10)
```
:::

::: {#secondcol}
What is the type of the `runtime` variable?

a.  Character

b.  Double

c.  Factor

d.  Integer

e.  Logical
:::
:::

\vspace{2cm}

### Question 12

The code below summarizes the data in a certain way.

```{r}
movies |>
  summarize(sum(release_country == "United States"))
```

Which of the following is [**TRUE**]{.underline} about the code and its result?
**Select all that are true.**

a.  Evaluates whether each `release_country` is equal to `"United States"` or not, which results in a logical variable.

b.  Filters out rows where `release_country` is not equal to `"United States"` and counts the remaining rows.

c.  Sums the logical values, where each `TRUE` is considered a 1 and each `FALSE` is considered a 0.

d.  Results in a character vector.

e.  The result shows there are 435 movies released in the United States.

### Question 13

Suppose you want a visualization that shows the number of movies in the sample in each `genre`.
Your first attempt is as follows.

```{r}
#| fig-width: 6
#| fig-asp: 0.4
ggplot(movies, aes(x = genre)) +
  geom_bar()
```

A friend of yours says that the visualization is difficult to read and they suggest using the following visualization instead.

```{r}
#| echo: false
#| fig-width: 6
#| fig-asp: 0.4
movies <- movies |>
  mutate(
    genre = fct_other(genre, keep = c("Action", "Comedy", "Drama", "Horror")),
    genre = fct_relevel(genre, "Other", "Horror", "Drama", "Action", "Comedy")
  )

ggplot(movies, aes(y = genre)) +
  geom_bar(show.legend = FALSE) +
  labs(
    x = "Number of movies",
    y = "Genre",
    title = "Movies and genres",
    caption = "Source: IMDB."
  )
```

Which of the following modifications would your friend have made to your code to create their version?
**Select all that apply.**

a.  Combine movies in genres other than Comedy, Drama, Action, and Horror into a new level called `"Other"`.

b.  Reorder the levels in descending order of numbers of observations, except for the `"Other"` level.

c.  Map `genre` to the `y` aesthetic.

d.  Add a title, x and y-axis labels, and a caption.

e.  Filter out all moves in genres other than Comedy, Drama, Action, and Horror before plotting.

### Question 14

Which of the following is [**TRUE**]{.underline} about the code and its result?
**Select all that are true.**

```{r}
movies |>
  count(rating, genre) |>
  pivot_wider(names_from = genre, values_from = n, values_fill = 0)
```

a.  The code counts how many movies are in each rating and genre combination.

b.  The code sorts the results in descending order.

c.  Each row of the output is a movie.

d.  The output shows that there are six distinct ratings in the dataset.

e.  The code reduces the number of variables and observations in the `movies` data frame to six.
