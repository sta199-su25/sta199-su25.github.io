---
title: "Meet the Toolkit"
subtitle: "Lecture 1"
date: "2025-05-15"
format: 
  revealjs:
    output-file: 01-meet-the-toolkit-slides.html
auto-stretch: false
---

## Reminders

-   If you have not yet finished the `Getting to Know You` survey, please do so ASAP!

-   Make your appointments in the Testing Center now!

-   Any questions about the syllabus??

# Today: Course toolkit

# Ask so many questions!!!

## Course toolkit {.smaller}

::: columns
::: {.column width="50%"}
**Course operation**

-   Materials: [sta199-f24.github.io](https://sta199-f24.github.io/)
-   Submission: Gradescope
-   Discussion: Ed Discussion
-   Gradebook: Canvas
:::

::: {.column width="50%"}
::: {.fragment style="background-color:#f3e6ff; border-radius:10px; padding:10px;"}
<strong>Doing data science</strong>

-   Computing:
    -   R\
    -   RStudio\
    -   tidyverse\
    -   Quarto\
-   Version control and collaboration:
    -   Git\
    -   GitHub\
:::
:::
:::

# Toolkit: Computing

## Learning goals {.smaller}

By the end of the course, you will be able to...

::: incremental
-   gain insight from data
-   gain insight from data, **reproducibly**
-   gain insight from data, reproducibly, **using modern programming tools and techniques**
-   gain insight from data, reproducibly **and collaboratively**, using modern programming tools and techniques
-   gain insight from data, reproducibly **(with literate programming and version control)** and collaboratively, using modern programming tools and techniques
:::

# Reproducible data analysis

## Reproducibility checklist {.smaller}

::: question
How do we make sure a data analysis is "reproducible"?
:::

. . .

**Short-term goals:**

-   Are the tables and figures reproducible from the code and data?
-   Does the code actually do what you think it does?
-   In addition to what was done, is it clear *why* it was done?

. . .

**Long-term goals:**

-   Can the code be used for other data?
-   Can you extend the code to do other things?

## Toolkit for reproducibility

\- Scriptability \$\\rightarrow\$ R

\- Literate programming (code, narrative, output in one place) \$\\rightarrow\$ Quarto

\- Version control \$\\rightarrow\$ Git / GitHub

## An Analogy to English

![](images/R-english-analogy/1.jpg){fig-alt="R"}

## An Analogy to English

![](images/R-english-analogy/2.jpg){fig-alt="Rstudio"}

## An Analogy to English

![](images/R-english-analogy/3.jpg){fig-alt="Quarto"}

## An Analogy to English

![](images/R-english-analogy/4.jpg){fig-alt="git"}

## An Analogy to English

![](images/R-english-analogy/5.jpg){fig-alt="github"}

# R and RStudio

## R and RStudio {.smaller}

::: columns
::: {.column width="50%"}
![](images/01/r-logo.png){fig-alt="R logo" fig-align="center"}

-   R is an open-source statistical **programming language**
-   R is also an environment for statistical computing and graphics
-   *Packages* make R easily *extensible*
:::

::: {.column width="50%"}
![](images/01/rstudio-logo.png){fig-alt="RStudio logo"}

-   RStudio is a convenient interface for R called an **IDE** (integrated development environment), e.g. *"I write R code in the RStudio IDE"*
-   RStudio is not a requirement for programming with R, but it's very commonly used by R programmers and data scientists
:::
:::

## R vs. RStudio: Another Analogy

[![](images/01/r_vs_rstudio.png){fig-alt="On the left: a car engine. On the right: a car dashboard. The engine is labelled R. The dashboard is labelled RStudio." fig-align="center" width="1001"}](https://moderndive.com/1-getting-started.html)

::: aside
Source: [Modern Dive](https://moderndive.com/1-getting-started.html).
:::

## Tour: R + RStudio {.smaller}

::: columns
::: {.column width="50%"}
::: demo
**Option 1:**

Sit back and enjoy the show!
:::
:::

::: {.column width="50%"}
::: appex
**Option 2:**

Go to [your container](https://cmgr.oit.duke.edu/containers) and launch RStudio.
:::
:::
:::

## Tour recap: R + RStudio

![](images/01/tour-r-rstudio.png)

## A short list (for now) of R essentials {.smaller}

-   Functions are (most often) verbs, followed by what they will be applied to in parentheses:

```{r}
#| eval: false

do_this(to_this)
do_that(to_this, to_that, with_those)
```

<br>

-   Packages are installed with the `install.packages()` function and loaded with the `library` function, once per session:

```{r}
#| eval: false

install.packages("package_name")
library(package_name)
```

## R essentials (continued) {.smaller}

Data frames: like the spreadsheets of R

-   Each row of a data frame is an **observation**
-   Each column of a data frame is a **variable**

![](images/df.png)

## R essentials (continued) {.smaller}

-   Use the question mark `?` to get help with objects (like data frames and functions):

```{r}
#| eval: false

?function_name

```

-   Use the dollar sign `$` to access columns

```{r}
#| eval: false

dataframe$column

```

::: callout-note
Generally, you need to use the `$` to tell R *where* to find that column.
:::

## R essentials (continued) {.smaller}

-   Use the arrow `<-` or equals sign `=` to save objects

```{r}
#| eval: false

x = some_thing
y <- some_other_thing

```

::: callout-note
Check your environment pane for the saved object!
:::

## R essentials (continued) {.smaller}

-   Look out for warning and error messages!!!

-   These are essential for figuring out where your code is going wrong.
    If you have trouble understanding what a message is saying, there is a high chance someone has explained the message online.

Check your environment pane for the saved object!

## R packages {.smaller}

::: incremental
-   **Packages**: Fundamental units of reproducible R code, including reusable R functions, the documentation that describes how to use them, and sample data<sup>1</sup>

-   As of 27 August 2024, there are 21,168 R packages available on **CRAN** (the Comprehensive R Archive Network)<sup>2</sup>

-   We're going to work with a small (but important) subset of these!
:::

::: aside
<sup>1</sup> Wickham and Bryan, [R Packages](https://r-pkgs.org/).

<sup>2</sup> [CRAN contributed packages](https://cran.r-project.org/web/packages/).
:::

## tidyverse {.smaller}

::: columns
::: {.column width="40%"}
[![](images/01/tidyverse.png){fig-alt="Hex logos for dplyr, ggplot2, forcats, tibble, readr, stringr, tidyr, and purrr"}](https://tidyverse.org)
:::

::: {.column width="60%"}
[tidyverse.org](https://www.tidyverse.org/)

-   The **tidyverse** is a collection of R packages designed for data science

<br>

-   All packages share an underlying philosophy and a common grammar
:::
:::

# Quarto

## Quarto

::: incremental
-   Fully reproducible reports -- each time you render the analysis is ran from the beginning
-   Code goes in chunks; narrative (normal text) goes outside of chunks
-   A visual editor for a familiar / Google docs-like editing experience
:::

## Tour: Quarto {.smaller}

::: columns
::: {.column width="50%"}
::: demo
**Option 1:**

Sit back and enjoy the show!
:::
:::

::: {.column width="50%"}
::: appex
**Option 2:**

Go to RStudio and open the document `ae-01-meet-the-penguins.qmd`.
:::
:::
:::

## Tour recap: Quarto

![](images/01/tour-quarto.png){fig-alt="RStudio IDE with a Quarto document, source code on the left and output on the right. Annotated to show the YAML, a link, a header, and a code chunk." fig-align="center"}

## How will we use Quarto?

-   Every application exercise, lab, project, etc. is an Quarto document
-   You'll always have a template Quarto document to start with
-   The amount of scaffolding in the template will decrease over the semester

# Toolkit: Version Control

## Git and GitHub {.smaller}

::: columns
::: {.column width="50%"}
![](images/01/git-logo.png){fig-alt="Git logo" fig-align="center" width="150"}

-   Git is a version control system -- like "Track Changes" features from Microsoft Word, on steroids
-   It's not the only version control system, but it's a very popular one
:::

::: {.column width="50%"}
![](images/01/github-logo.png){fig-alt="GitHub logo" fig-align="center" width="150"}

-   GitHub is the home for your Git-based projects on the internet -- like DropBox but much, much better

-   We will use GitHub as a platform for web hosting and collaboration (and as our course management system!)
:::
:::

## Versioning - done badly

![](images/01/phd_comics_vc.gif){fig-align="center"}

## Versioning - done better

![](images/01/lego-steps.png){fig-align="center"}

## Versioning - done even better

::: hand
with human readable messages
:::

![](images/01/lego-steps-commit-messages.png){fig-align="center"}

## How will we use Git and GitHub?

![](images/01/whole-game-01.png){fig-align="center"}

## How will we use Git and GitHub?

![](images/01/whole-game-02.png){fig-align="center"}

## How will we use Git and GitHub?

![](images/01/whole-game-03.png){fig-align="center"}

## How will we use Git and GitHub?

![](images/01/whole-game-04.png){fig-align="center"}

## Git and GitHub tips {.smaller}

::: incremental
-   There are ***so many*** and very few people know them all. 99% of the time you will use git to commit, push, and pull:
    -   commit: tell git to keep track of what changes you've made - use a message!!
    -   push: add the changes to the repository (folder)
    -   pull: get changes from the repository (folder)
-   There is a great resource for working with git and R: [happygitwithr.com](http://happygitwithr.com/). Some of the content in there is beyond the scope of this course, but it's a good place to look for help.
:::

## Tour: Git + GitHub {.smaller}

::: columns
::: {.column width="50%"}
::: demo
**Option 1:**

Sit back and enjoy the show!
:::
:::

::: {.column width="50%"}
::: appex
**Option 2:**

Go to the [course GitHub organization](https://github.com/sta199-s25) and clone `ae-your_github_name` repo to [your container](https://cmgr.oit.duke.edu/containers).
:::
:::
:::

## Tour recap: Git + GitHub {.smaller}

-   Find your application repo, that will always be named using the naming convention `assignment_title-your_github_name`

-   Click on the green "Code" button, make sure SSH is selected, copy the repo URL

![](images/01/tour-git-github-1.png){fig-align="center" width="1000"}

## Tour recap: Git + GitHub {.smaller}

Once we made changes to our Quarto document, we

-   went to the Git pane in RStudio

-   staged our changes by **clicking the checkboxes** next to the relevant files

-   committed our changes with an **informative commit message**

-   **pushed our change**s to our application exercise repos

-   **confirmed on GitHub** that we could see our changes pushed from RStudio

## Let's Practice: AE01 {.smaller}
