---
title: "Data Tidying"
subtitle: "Lecture 5"
date: "2025-05-19"
format: 
  revealjs:
    output-file: 06-data-tidy-slides.html
auto-stretch: false
---

## Announcements/Reminders {.smaller}

-   You have lab today!
    Lab will be a little longer.

-   Tomorrow's office hours are with Katie on Zoom.

## Outline {.smaller}

-   ***Last Time:*** Did more data transformation and *exploratory data analysis*.

    -   Look at the rest of AE-05!

-   ***Today:*** Learn about data tidying.

```{r}
#| label: slice
#| code-line-numbers: "|1|2"
#| echo: false
#| message: false
#| warning: false

library(tidyverse)
bechdel <- read_csv("data/statsci.csv")
```

## Assigment

How can we save the changes we make to a data frame?

## Assignment {.smaller}

Let's make a tiny data frame to use as an example:

```{r}
#| message: false

library(tidyverse)
df <- tibble(x = c(1, 2, 3, 4, 5), y = c("a", "a", "b", "c", "c"))
df
```

## Assignment {.smaller}

::: columns
::: {.column .fragment width="50%"}
> **Do something and show me**

```{r}
df |>
  mutate(x = x * 2)
df
```
:::

::: {.column .fragment width="50%"}
> **Do something and save result**

```{r}
df <- df |>
  mutate(x = x * 2)
```

```{r}
df
```
:::
:::

## Assignment {.smaller}

::: columns
::: {.column .fragment width="50%"}
> **Do something, save result, overwriting original**

```{r}
#| code-line-numbers: "5-7"

df <- tibble(
  x = c(1, 2, 3, 4, 5), 
  y = c("a", "a", "b", "c", "c")
)
df <- df |>
  mutate(x = x * 2)
df
```
:::

::: {.column .fragment width="50%"}
> **Do something, save result, *not* overwriting original**

```{r}
#| code-line-numbers: "5-7"

df <- tibble(
  x = c(1, 2, 3, 4, 5), 
  y = c("a", "a", "b", "c", "c")
)
df_new <- df |>
  mutate(x = x * 2)
df_new
```
:::
:::

## Assignment {.smaller}

::: columns
::: {.column .fragment width="50%"}
> **Do something, save result, overwriting original *when you shouldn't***

```{r}
#| code-line-numbers: "5-8"

df <- tibble(
  x = c(1, 2, 3, 4, 5), 
  y = c("a", "a", "b", "c", "c")
)
df <- df |>
  group_by(y) |>
  summarize(mean_x = mean(x))
df
```
:::

::: {.column .fragment width="50%"}
> **Do something, save result, *not* overwriting original *when you shouldn't***

```{r}
#| code-line-numbers: "5-8"

df <- tibble(
  x = c(1, 2, 3, 4, 5), 
  y = c("a", "a", "b", "c", "c")
)
df_summary <- df |>
  group_by(y) |>
  summarize(mean_x = mean(x))
df_summary
```
:::
:::

## Assignment {.smaller}

::: columns
::: {.column .fragment width="50%"}
> **Do something, save result, overwriting original**\
> ***data frame***

```{r}
#| code-line-numbers: "5-7"

df <- tibble(
  x = c(1, 2, 3, 4, 5), 
  y = c("a", "a", "b", "c", "c")
)
df <- df |>
  mutate(z = x + 2)
df
```
:::

::: {.column .fragment width="50%"}
> **Do something, save result, overwriting original**\
> ***column***

```{r}
#| code-line-numbers: "5-7"

df <- tibble(
  x = c(1, 2, 3, 4, 5), 
  y = c("a", "a", "b", "c", "c")
)
df <- df |>
  mutate(x = x + 2)
df
```
:::
:::

## Assignment: when?? {.smaller}

***When should you assign results to a variable?***

-   If you know you will want to use the result multiple times

-   We will tell you on the lab when we want you to assign a variable to a pipeline result vs. just show the pipeline

::: callout-caution
Be careful about overwriting the original data!!
:::

# Data tidying

## Tidy data

> "Tidy datasets are easy to manipulate, model and visualise, and have a specific structure: each variable is a column, each observation is a row, and each type of observational unit is a table."
>
> Tidy Data, <https://vita.had.co.nz/papers/tidy-data.pdf>

. . .

**Note:** "easy to manipulate" = "straightforward to manipulate"

## Goal

Visualize StatSci majors over the years!

![](images/06/statsci-majors.png)

## Data {.smaller}

```{r}
statsci <- read_csv("data/statsci.csv")
statsci
```

-   The first column (variable) is the `degree`, and there are 4 possible degrees: BS (Bachelor of Science), BS2 (Bachelor of Science, 2nd major), AB (Bachelor of Arts), AB2 (Bachelor of Arts, 2nd major).

-   The remaining columns show the number of students graduating with that major in a given academic year from 2011 to 2024.

## Let's plan! {.smaller .nostretch}

In a perfect world, how would our data be formatted to create this plot?
What do the columns need to be?
What would go inside `aes` when we call `ggplot`?

![](images/06/statsci-majors.png)

## The goal

We want to be able to write code that starts something like this:

```{r}
#| eval: false 
ggplot(statsci, aes(x = year, y = n, color = degree_type)) + 
  ...
```

But the data are not in a format that will allow us to do that.

## The challenge {.smaller .scrollable}

::: columns
::: {.column .fragment width="69%"}
> How do we go from this...

```{r}
#| echo: false

statsci |>
  separate(degree, sep = " \\(", into = c("major", "degree_type")) |>
  mutate(
    degree_type = str_remove(degree_type, "\\)"),
    degree = fct_relevel(degree_type, "BS", "BS2", "AB", "AB2")
  ) |>
  select(degree, `2011`, `2012`, `2013`, `2014`, `2015`, `2016`, `2017`)
```
:::

::: {.column .fragment width="29%"}
> ...to this?

```{r}
#| echo: false

statsci |>
  pivot_longer(
    cols = -degree,
    names_to = "year",
    names_transform = as.numeric,
    values_to = "n"
  ) |>
  mutate(n = if_else(is.na(n), 0, n)) |>
  separate(degree, sep = " \\(", into = c("major", "degree_type")) |>
  mutate(
    degree_type = str_remove(degree_type, "\\)"),
    degree_type = fct_relevel(degree_type, "BS", "BS2", "AB", "AB2")
  ) |>
  select(degree_type, year, n) |>
  print(n = 16)
```
:::
:::

. . .

With the command `pivot_longer()`!

## `pivot_longer()` {.smaller .scrollable}

::: task
Pivot the `statsci` data frame *longer* such that:

-   each row represents a degree type / year combination

-   `year` and `n`umber of graduates for that year are columns in the data frame.
:::

```{r}
statsci |>
  pivot_longer(
    cols = -degree,
    names_to = "year",
    values_to = "n"
  )
```

## `year`

::: question
What is the type of the `year` variaBle?
Why?
What should it be?
:::

. . .

-   It's a character (`chr`) variable because the information came from the column names of the original data frame

-   R cannot know that these words represent years.

-   The variable type should be numeric.


# AE 06
