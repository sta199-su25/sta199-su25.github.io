---
title: "Grammar of Data Transformation"
subtitle: "Lecture 4"
date: "2025-05-19"
format: 
  revealjs:
    output-file: 04-data-wrangle-slides.html
auto-stretch: false
---

## Announcements/Reminders {.smaller}

-   Lab is due tomorrow night!

-   Come to office hours and/or post on Ed for help!

## Lab: Code Style (Do these things!!!)

*Which of these pieces of code is easier to read?*

```{r}
#| eval: false

ggplot(bechdel, aes(x=budget_2013,y=gross_2013,color=binary,size=roi)) +
geom_point(alpha = 0.5) + facet_wrap(~clean_test) 
```

<br> <br>

```{r}
#| eval: false

ggplot(bechdel, aes(x = budget_2013, y = gross_2013,
                    color = binary, size = roi)) +
  geom_point(alpha = 0.5) + 
  facet_wrap(~clean_test) 
```

## Lab: Code Style (Do these things!!!) {.smaller .incremental}

Code should follow the **tidyverse** style:

-   there should be spaces before and line breaks after each `+` when building a `ggplot`

-   there should also be spaces before and line breaks after each `|>` in a data transformation pipeline

-   code should be properly indented

-   spaces around `=` signs and spaces after commas

All code should be visible in the PDF output (should not run off the page)!
Use line breaks to prevent this.

## Survey Responses {.smaller}

::: incremental
-   **Concerns:** first time coding + the quick pace of the course\
-   **Best way to succeed?** Come to class/labs and ask for help!!!\
-   **Grading:**
    -   Is the midterm take-home individual or collaborative?\
        Individual!!\
    -   Is the class curved or absolute?\
        We will only curve up -- your absolute grade is the minimum you can get\
-   **What is statistics/this class???**
:::

## Outline {.smaller}

-   ***Last Time:*** Learned about more types of plots

-   ***Today:*** Grammar of 'data wrangling'

```{r}
#| label: slice
#| code-line-numbers: "|1|2"
#| echo: false
#| message: false
#| warning: false

library(tidyverse)
bechdel <- read_csv("data/bechdel.csv")
```

# AE-02: Any questions?

# Data Transformation

## dplyr

Primary package in the **tidyverse** for data wrangling and transformation

::: columns
::: {.column width="50%"}
[dplyr.tidyverse.org](https://dplyr.tidyverse.org)

```{=html}
<iframe width=600 height=375 src="https://dplyr.tidyverse.org/" title="dplyr home page"></iframe>
```
:::
:::

## What is data transformation?

::: incremental
-   Making new variables (example: garage in AE03)

-   Renaming/reordering your data frame

-   Summarizing information about your variables

-   And more!
:::

## The pipe {.incremental}

::: incremental
-   The **pipe**, `|>`, is an operator (a tool) for passing information from one process to another.

-   Use `|>` to pass the output of the previous line of code as the first input of the next line of code.

-   When reading code "in English", say "and then" whenever you see a pipe.
:::

# Row Operations

## Row Operations {.smaller}

-   `slice()`: chooses rows based on location

<br>

| Variable1 | Variable2 | Variable3 |
|-----------|-----------|-----------|
| 1         | A         | Yes       |
| 2         | B         | Yes       |
| 5         | A         | No        |
| 2         | B         | No        |
| 1         | A         | No        |
| 4         | B         | No        |

## Row Operations {.smaller}

-   `filter()`:chooses rows based on column values

<br>

| Variable1 | Variable2 | Variable3 |
|-----------|-----------|-----------|
| 1         | A         | Yes       |
| 2         | B         | Yes       |
| 5         | A         | No        |
| 2         | B         | No        |
| 1         | A         | No        |
| 4         | B         | No        |

## Row Operations {.smaller}

-   `arrange()`: changes the order of the rows

<br>

| Variable1 | Variable2 | Variable3 |
|-----------|-----------|-----------|
| 1         | A         | Yes       |
| 2         | B         | Yes       |
| 5         | A         | No        |
| 2         | B         | No        |
| 1         | A         | No        |
| 4         | B         | No        |

## Row Operations {.smaller}

-   `sample_n()`: take a random subset of the rows

<br>

| Variable1 | Variable2 | Variable3 |
|-----------|-----------|-----------|
| 1         | A         | Yes       |
| 2         | B         | Yes       |
| 5         | A         | No        |
| 2         | B         | No        |
| 1         | A         | No        |
| 4         | B         | No        |

## `slice()` {.smaller}

Display the first five rows of `bechdel`:

```{r}
#| label: slice-b
#| code-line-numbers: "|1|2"

bechdel
```

## `slice()` {.smaller}

Display the first five rows of `bechdel`:

```{r}
#| label: slice-b-2
#| code-line-numbers: "2"

bechdel |>
  slice(1:5)
```

## `filter()` {.smaller}

Keep only the rows of`bechdel` that pass the test:

```{r}
#| label: filter

bechdel
```

## `filter()` {.smaller}

Keep only the rows of`bechdel` that pass the test:

```{r}
#| label: filter-2
#| code-line-numbers: "2"

bechdel |>
  filter(binary == "PASS")
```

## `filter()` {.smaller}

Keep only the movies from before 2000

```{r}
#| label: filter-3
#| code-line-numbers: "2"

bechdel |>
  filter(year < 2000)
```

## `filter()` {.smaller}

Often (but not always), looks like:

```{r}
#| eval: false

filter(variable [logical operator] value)
```

or

```{r}
#| eval: false

filter(!is.na(variable))
```

## Some logical operators {.smaller}

| operator | definition                   |
|:---------|:-----------------------------|
| `<`      | is less than?                |
| `<=`     | is less than or equal to?    |
| `>`      | is greater than?             |
| `>=`     | is greater than or equal to? |
| `==`     | is exactly equal to?         |
| `!=`     | is not equal to?             |

## More logical operators {.smaller}

| operator      | definition                                               |
|:--------------|:---------------------------------------------------------|
| `x & y`       | is x AND y?                                              |
| `x | y`       | is x OR y?                                               |
| `is.na(x)`    | is x NA?                                                 |
| `!is.na(x)`   | is x not NA?                                             |
| `x %in% y`    | is x in y?                                               |
| `!(x %in% y)` | is x not in y?                                           |
| `!x`          | is not x? (only makes sense if `x` is `TRUE` or `FALSE`) |

## `filter()` {.smaller}

Keep only the movies from before 2000 AND that pass the test

```{r}
#| label: and-3
#| code-line-numbers: "2"

bechdel |>
  filter(year < 2000 & binary == "PASS")
```

## `sample_n()` {.smaller}

Display five random rows of`bechdel`:

```{r}
#| label: sample_n-0

bechdel 
```

## `sample_n()` {.smaller}

Display five random rows of`bechdel`:

```{r}
#| label: sample_n
#| code-line-numbers: "2"

bechdel |>
  sample_n(5)
```

# Column Operations

## Column operations {.smaller}

-   `select()`: changes whether or not a column is included.

<br>

| Variable1 | Variable2 | Variable3 |
|-----------|-----------|-----------|
| 1         | A         | Yes       |
| 2         | B         | Yes       |
| 5         | A         | No        |
| 2         | B         | No        |
| 1         | A         | No        |
| 4         | B         | No        |

## Column operations {.smaller}

-   `rename()`: changes the name of columns.

<br>

| Variable1 | Variable2 | Variable3 |
|-----------|-----------|-----------|
| 1         | A         | Yes       |
| 2         | B         | Yes       |
| 5         | A         | No        |
| 2         | B         | No        |
| 1         | A         | No        |
| 4         | B         | No        |

## Column operations {.smaller}

-   `mutate()`: changes the values of columns and creates new columns.

<br>

| Variable1 | Variable2 | Variable3 |
|-----------|-----------|-----------|
| 1         | A         | Yes       |
| 2         | B         | Yes       |
| 5         | A         | No        |
| 2         | B         | No        |
| 1         | A         | No        |
| 4         | B         | No        |

## `select()` {.smaller}

Keep only the title and test status.

```{r}
#| label: select

bechdel
```

## `select()` {.smaller}

Keep only the title and test status.

```{r}
#| label: select-2
#| code-line-numbers: "2"

bechdel |>
  select(title, clean_test)
```

## `mutate()` {.smaller}

Create a new variable for the budget in millions

```{r}
#| label: mutate

bechdel
```

## `mutate()` {.smaller}

Keep only the title and test status.

```{r}
#| label: mutate-2
#| code-line-numbers: "2"

bechdel |>
  mutate(budget_million = budget_2013/1000000)
```

## `mutate()` {.smaller}

Generally, looks like:

```{r}
#| eval: false

mutate(new_variable_name = function(existing_variable))
```

## `rename()` {.smaller}

Rename `clean_test` to `test_result`

```{r}
#| label: rename

bechdel
```

## `rename()` {.smaller}

Rename `clean_test` to `test_result`

```{r}
#| label: rename-2
#| code-line-numbers: "2"

bechdel |>
  rename(test_result = clean_test)
```

## `rename()` {.smaller}

Generally, looks like:

```{r}
#| eval: false

select(new_variable_name = old_variable_name)
```

# Groups of rows

## Groups of rows

-   `count()`: count unique values of one or more variables.

<br>

| Variable1 | Variable2 | Variable3 |
|-----------|-----------|-----------|
| 1         | A         | Yes       |
| 2         | B         | Yes       |
| 5         | A         | No        |
| 2         | B         | No        |
| 1         | A         | No        |
| 4         | B         | No        |

## Groups of rows

-   `group_by()`: group separately for each value of a variable

<br>

| Variable1 | Variable2 | Variable3 |
|-----------|-----------|-----------|
| 1         | A         | Yes       |
| 2         | B         | Yes       |
| 5         | A         | No        |
| 2         | B         | No        |
| 1         | A         | No        |
| 4         | B         | No        |

## Groups of rows

-   `summarize()`: collapses a group into a single row.

<br>

| Variable1 | Variable2 | Variable3 |
|-----------|-----------|-----------|
| 1         | A         | Yes       |
| 2         | B         | Yes       |
| 5         | A         | No        |
| 2         | B         | No        |
| 1         | A         | No        |
| 4         | B         | No        |

## `count()` {.smaller}

Count how many movies pass or fail the Bechdel test.

```{r}
#| label: count

bechdel
```

## `count()` {.smaller}

Count how many movies pass or fail the Bechdel test.

```{r}
#| label: count-2
#| code-line-numbers: "2"

bechdel |>
  count(binary)
```

## `summarize()` {.smaller}

Compute average budget

```{r}
#| label: sm

bechdel 
```

## `summarize()` {.smaller}

Compute average budget

```{r}
#| label: sm-2
#| code-line-numbers: "2"

bechdel |>
  summarize(mean_budget = mean(budget_2013))
```

## `summarize()` {.smaller}

Generally, looks like:

```{r}
#| eval: false

summarize(resut_variable_name = function(existing_variable))
```

## `group_by()` {.smaller}

Group by movies passing or failing the test

```{r}
#| label: gb

bechdel
```

## `group_by()` {.smaller}

Group by movies passing or failing the test

```{r}
#| label: gb-2

bechdel |>
  group_by(binary)
```

## `group_by() + summarize()` {.smaller}

Group by movies passing/failing and compute within-group average budget

```{r}
#| label: gb-s

bechdel |>
  group_by(binary) |>
  summarize(mean_budget = mean(budget_2013))
```

## Where can I find all of this??!

# AE 04
