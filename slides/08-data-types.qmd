---
title: "Data types and classes"
subtitle: "Lecture 8"
date: "May 27, 2025"
format: 
  revealjs:
    output-file: 08-data-types-slides.html
auto-stretch: false
---

```{r}
#| echo: false
#| message: false

library(tidyverse)
library(ggthemes)
ggplot2::theme_set(theme_gray(base_size = 16))
```

## Announcements

-   Exam 1 in class next week on Tuesday -- cheat sheet (1 page, both sides, hand-written or typed, must be prepared by you)
-   Exam 1 take home starts after class on **Tuesday**, due at 9:30 AM on **Wednesday** (open resources, internet, etc., closed to other humans)

## Study tips for the exam

-   Review lectures/readings/labs/AEs
-   Make sure you understand [***why***]{.underline} code has the output it does
-   Lab 3 will cover most of what we have done so far - think of this as a type of review!
-   General practice/ in class review coming on Friday!

# Types and classes

## Types and classes

An object's *type* indicates how it is stored in memory.

## Common data types

::: columns
::: {.column width="50%"}
You'll commonly encounter:

-   `logical`
-   `integer`
-   `double`
-   `character`
:::

::: {.column width="50%"}
You'll less commonly encounter:

-   `list`
-   `NULL`
-   `complex`
-   `raw`
:::
:::

## Logical and Character {.smaller}

::: columns
::: {.column width="50%"}
**Logical:** Boolean `TRUE` / `FALSE` values

-   `<dbl>`

```{r}
typeof(TRUE)
```

<br>

```{r}
typeof(FALSE)
```
:::

::: {.column width="50%"}
**Character:** Character strings; in quotes

-   \`\<chr\>\`

```{r}
typeof("Hello!")
```

<br>

```{r}
typeof("TRUE")
```
:::
:::

## Numeric: Double and integer {.smaller}

::: columns
::: {.column width="50%"}
**Double**: floating point numerical values (default numerical type)

-   \`\<dbl\>\`

```{r}
typeof(2.5)
```

<br>

```{r}
typeof(3)
```
:::

::: {.column width="50%"}
**Integer**: integer numerical values; indicated with an `L`

-   \`\<int\>\`

```{r}
typeof(3L)
```
:::
:::

## Type Compatibility {.smaller}

Can you use different types of data together?
Sometimes... but be careful!

```{r}
#| error: true

"3" + 3
```

```{r}
#| error: true

3L + 3
typeof(3L + 3)
```

```{r}
#| error: true

TRUE + 3
typeof(TRUE + 3)
```

## Concatenation {.smaller}

**Vectors** are constructed using the `c` function

::: columns
::: {.column width="50%"}
-   **Double** vector:

    ```{r}
    x <- c(1, 2, 3, 5)
    typeof(x)
    ```

-   **Integer** vectors:

    ```{r}
    x <- c(1L, 2L, 3L, 5L)
    typeof(x)
    ```
:::

::: {.column width="50%"}
-   **Character** vector:

    ```{r}
    x <- c("1", "2", "3", "5")
    typeof(x)
    ```

-   **Logical** vectors:

    ```{r}
    x <- c(TRUE, FALSE, FALSE)
    typeof(x)
    ```
:::
:::

## Converting between types {.smaller}

::: hand
without intention...
:::

```{r}
c(2, "Just this one!")
```

<br>

R will happily convert between various types without complaint when different types of data are concatenated in a vector.
This is NOT always a good thing.

## Converting between types {.smaller}

::: hand
without intention...
:::

```{r}
c(FALSE, 3L)
```

<br>

```{r}
c(1.2, 3L)
```

<br>

```{r}
c(2L, "two")
```

## Converting between types

::: hand
with intention...
:::

::: columns
::: {.column width="49%"}
```{r}
x <- 1:3
x
typeof(x)
```
:::

::: {.column .fragment width="49%"}
```{r}
y <- as.character(x)
y
typeof(y)
```
:::
:::

## Converting between types

::: hand
with intention...
:::

::: columns
::: {.column width="49%"}
```{r}
x <- c(TRUE, FALSE)
x
typeof(x)
```
:::

::: {.column .fragment width="49%"}
```{r}
y <- as.numeric(x)
y
typeof(y)
```
:::
:::

## Explicit vs. implicit coercion {.smaller}

::: columns
::: {.column width="49%"}
**Explicit coercion:**

When you call a function like:

-   `as.logical()`

-   `as.numeric()`

-   `as.integer()`

-   `as.double()`

-   `as.character()`.
:::

::: {.column .fragment width="49%"}
**Implicit coercion:**

Happens when you use a vector in a specific context that expects a certain type of vector.
:::
:::

# Data classes

## Data classes {.smaller}

::: incremental
-   Data types are like Lego building blocks
-   We can stick them together to build more complicated constructs, e.g. *representations of data*
-   The **class** determines this construct
-   Examples: factors, dates, and data frames
:::

## Data frames {.smaller}

We can think of data frames like like vectors of equal length glued together

```{r}
df <- data.frame(x = 1:2, y = 3:4)
df
```

::: columns
::: column
```{r}
typeof(df)
```
:::

::: column
```{r}
class(df)
```
:::
:::

## Data frames {.smaller}

We can think of data frames like like vectors of equal length glued together

```{r}
df <- data.frame(x = 1:2, y = 3:4)
df
```

::: columns
::: column
```{r}
typeof(df)
```
:::

::: column
```{r}
class(df)
```
:::
:::

-   When we use the `pull()` function, we extract a vector from the data frame

```{r}
df |>
  pull(y)
```

## Dates

```{r}
today <- as.Date("2025-05-27")
today
```

```{r}
typeof(today)
```

```{r}
class(today)
```

## More on dates

We can think of dates like an integer (the number of days since the origin, 1 Jan 1970) and an integer (the origin) glued together

```{r}
as.integer(today)
```

```{r}
as.integer(today) / 365 # roughly 55 yrs
```

## Factors {.smaller}

R uses **factors** to handle **categorical variables** with a fixed and known set of possible values

```{r}
months <- c("June", "July", "June", "August", "June")
months_factor <- factor(months)
months_factor
```

::: columns
::: {.column .fragment}
```{r}
typeof(months_factor)
```
:::

::: {.column .fragment}
```{r}
class(months_factor)
```
:::
:::

## More on factors

We can think of factors like character (level labels) and an integer (level numbers) glued together

```{r}
glimpse(months_factor)
```

```{r}
as.integer(months_factor)
```

## More on factors {.smaller}

We can use the **forcats** package (in **tidyverse**) to work with factors!

Some commonly used functions are:

-   fct_relevel(): reorder factors by hand

-   fct_reorder(): reorder factors by another variable

-   fct_infreq(): reorder factors by frequency

-   fct_rev(): reorder factors by reversing

## Example Factor Re-Order

```{r}
amounts <- c("low", "medium", "high", "high", "medium")
amounts_factor <- factor(amounts)
amounts_factor
```

```{r}
fct_relevel(amounts_factor, c("low", "medium", "high"))
```

# Application exercise

## AE 08: Working with Factors
