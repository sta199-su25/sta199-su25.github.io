---
title: "Midterm + More Practice!"
subtitle: "Lecture 10"
date: "2025-05-29"
format: 
  revealjs:
    output-file: 10-practice-slides.html
auto-stretch: false
---

```{r}
#| include: false
library(tidyverse)
durham_climate <- read_csv("data/durham-climate.csv")
durham_climate <- durham_climate |> rename(precip = precipitation_in)
```

## Announcements

-   I will not hold office hours on Tuesday, June 3rd: this is when you have your take home!
-   Replacement midterm review office hours: June 2nd (3:30 - 5:30)
-   Be in class and lab on Monday!!!!
-   Tomorrow: Review game!

## Midterm Exam 1 {.smaller}

Worth 20% of your final grade; consists of two parts:

-   **In-class**: worth 70% of the Midterm 1 grade;

-   **Take-home**: worth 30% of the Midterm 1 grade.

## Material {.smaller}

Everything we have done so far:

-   plotting data with `ggplot` and interpreting plots
-   computing and understanding summary statistics
-   transforming data (row/column/grouping operations)
-   pivoting & joining data
-   data types/classes
-   importing data
-   *Monday's class*: *data science ethics*

## In-class

::: incremental
-   All multiple choice

-   You get both sides of one 8.5" x 11" note sheet that you and only you created (written, typed, iPad, etc)
:::

. . .

::: callout-important
If you have testing accommodations, make sure I get proper documentation from SDAO and make appointments in the Testing Center ASAP. The appointment should overlap substantially with our class time if possible.
:::

## What should I put on my cheat sheet? {.smaller}

::: incremental
-   description of common functions;
-   examples of function usage;
-   description of different visualizations: how to interpret, and what to use when;
-   doodles;
-   cute words of affirmation.
:::

. . .

::: callout-warning
Don't waste space on the details of any specific applications or datasets we've seen (penguins, Bechdel, gerrymandering, midwest, etc).
Anything we want you to know about a particular application will be introduced from scratch within the exam.
:::

## Example in-class question

Which command can replace a pre-existing column in a data frame with a new and improved version of itself?

a.  `group_by`
b.  `summarize`
c.  `pivot_wider`
d.  `geom_replace`
e.  `mutate`

## Example in-class question {.smaller}

```{r}
#| echo: false

df <- tibble(
  x = c(1, 2, 3, 4, 5, 6),
  y = c("Marie", "Marie", "Katie", "Mary", "Mary", "Mary")
)
```

::: columns
::: {.column width="40%"}
```{r}
df
```
:::

::: {.column width="50%"}
```{r}
#| eval: false 

df |>
  group_by(y) |>
  summarize(xbar = mean(x))
```

How many rows will this output have?

a.  1
b.  2
c.  3
d.  6
e.  11
:::
:::

## Example in-class question {.smaller}

::: columns
::: {.column width="50%"}
Which box plot is visualizing the same data as the histogram?
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
set.seed(100)
x <- c(rnorm(150), rnorm(350, mean = 2, sd = 0.5))
df <- tibble(x = x)
ggplot(df, aes(x = x)) +
  geom_histogram() + 
  theme(axis.text = element_text(size = 36)) + 
  labs(x = NULL, y = NULL)
```
:::
:::

```{r}
#| echo: false
#| fig-asp: 0.33
#| warning: false
w <- rnorm(500)
y <- c(pmax(rnorm(350, mean = -1), -2), rnorm(150, mean = 2, sd = 0.5))
z <- x + 10
X <- as_tibble(cbind(sort(rep(1:4, 500)), c(w, z, x, y))) |>
  mutate(
    V1 = case_when(
      V1 == 1 ~ "a",
      V1 == 2 ~ "b",
      V1 == 3 ~ "c",
      V1 == 4 ~ "d",
    )
  )
ggplot(X, aes(x = V2)) + 
  geom_boxplot() + 
  facet_wrap(.~V1, scales = "free") + 
  theme(axis.text = element_text(size = 18), 
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) + 
  labs(x = NULL, y = NULL)
```

## Example in-class question {.smaller}

What code could have been used to produce `df_result`?
Select all that apply.

::: columns
::: {.column width="25%"}
`df_X`

| state | year |
|-------|------|
| LA    | 2025 |
| NC    | 2025 |
| LA    | 2024 |
:::

::: {.column width="25%"}
`df_Y`

| state | region |
|-------|--------|
| LA    | south  |
| NC    | south  |
| CA    | west   |
:::

::: {.column width="50%"}
`df_result`

| state | year | region |
|-------|------|--------|
| LA    | 2025 | south  |
| NC    | 2025 | south  |
| LA    | 2024 | south  |
:::
:::

<br>

::: columns
::: {.column width="50%"}
a.  `left_join(df_X, df_Y)`\
b.  `right_join(df_X, df_Y)`\
c.  `full_join(df_X, df_Y)`\
:::

::: {.column width="50%"}
d.  `anti_join(df_Y, df_X)`\
e.  `right_join(df_Y, df_X)`\
:::
:::

## Take-home

::: incremental
-   It will be just like a lab, but shorter;
-   Completely open-resource, but citation policies apply;
-   Absolutely no collaboration of any kind;
-   Seek help by posting *privately* on Ed;
-   Submit your final PDF to Gradescope in the usual way.
:::

## Reminder: conduct policies

::: incremental
-   Uncited use of outside resources or inappropriate collaboration will result in a zero and be referred to the conduct office;
-   If a conduct violation of any kind is discovered, your final letter grade in the course will be permanently reduced (A- down to B+, B+ down to B, etc);
-   If folks share solutions, all students involved will be penalized equally, the sharer the same as the recipient.
:::

## Things you can do to study

::: incremental
-   **Practice problems**: released Thursday February 13;
-   **Attend class tomorrow**: review game
-   **Old labs**: correct parts where you lost points;
-   **Old AEs**: complete tasks we didn't get to and compare with key;
-   **Code along**: watch these videos specifically;
-   **Textbook**: odd-numbered exercises in the back of IMS Chs. 1, 4, 5, 6
:::

# Let's Practice!

## Today's Goals:

-   **Goal 1:** ✨Beautify✨ the plot from AE-08: plotting + ***factors***
-   **Goal 2:** Practice ***pivoting*** with AE-08 data
-   **Goal 3:** Practice data ***transformation*** and working with ***characters*** - sales data from yesterday

## Goal 1: Beautify AE-08 Plot {.smaller}

Data:

```{r}
durham_climate 
```

## Goal 1: Beautify AE-08 Plot {.smaller}

Original Plot:

```{r}
#| echo: false
ggplot(
  durham_climate, 
  aes(x = month, y = avg_high_f, group = 1)
  ) +
  geom_line() +
  geom_point(
    shape = "circle filled", size = 2,
    color = "black", fill = "white", stroke = 1
  ) +
  labs(
    x = "Month",
    y = "Average high temperature (F)",
    title = "Durham climate"
  )
```

## Goal 1: Beautify AE-08 Plot {.smaller}

Releveling Months:

```{r}
#| echo: false
durham_climate <- durham_climate |>
  mutate(month = fct_relevel(month, month.name))

ggplot(
  durham_climate,
  aes(x = month, y = avg_high_f, group = 1)
  ) +
  geom_line() +
  geom_point(
    shape = "circle filled", size = 2,
    color = "black", fill = "white", stroke = 1
  ) +
  labs(
    x = "Month",
    y = "Average high temperature (F)",
    title = "Durham climate"
  )
```

## Goal 1: Beautify AE-08 Plot {.smaller}

Goal:

```{r}
#| echo: false
durham_climate |>
  mutate(
    season = case_when(
      month %in% c("December", "January", "February") ~ "Winter",
      month %in% c("March", "April", "May") ~ "Spring",
      month %in% c("June", "July", "August") ~ "Summer",
      month %in% c("September", "October", "November") ~ "Fall",
    ),
    season = fct_relevel(season, "Winter", "Spring", "Summer", "Fall")
  ) |> ggplot(
  aes(x = month, y = avg_high_f, group = 1)
  ) +
  geom_line() +
  geom_point(
    aes(fill = season),
    shape = "circle filled", size = 3, stroke = 1
  ) +
  scale_fill_manual(
    values = c(
      "Winter" = "lightskyblue1",
      "Spring" = "chartreuse3",
      "Summer" = "gold2",
      "Fall" = "lightsalmon4"
    )
  ) +
  labs(
    x = "Month",
    y = "Average high temperature (F)",
    title = "Durham climate",
    fill = "Season"
  ) +
  theme_minimal() +
  theme(legend.position = "top") 
```

## Goal: Beautify AE-08 Plot {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
ggplot(
  durham_climate,
  aes(x = month, y = avg_high_f, group = 1)
  ) +
  geom_line() +
  geom_point(
    shape = "circle filled", size = 2,
    color = "black", fill = "white", stroke = 1
  ) +
  labs(
    x = "Month",
    y = "Average high temperature (F)",
    title = "Durham climate"
  )
```

```{r}
#| echo: false
durham_climate |>
  mutate(
    season = case_when(
      month %in% c("December", "January", "February") ~ "Winter",
      month %in% c("March", "April", "May") ~ "Spring",
      month %in% c("June", "July", "August") ~ "Summer",
      month %in% c("September", "October", "November") ~ "Fall",
    ),
    season = fct_relevel(season, "Winter", "Spring", "Summer", "Fall")
  ) |> ggplot(
  aes(x = month, y = avg_high_f, group = 1)
  ) +
  geom_line() +
  geom_point(
    aes(fill = season),
    shape = "circle filled", size = 3, stroke = 1
  ) +
  scale_fill_manual(
    values = c(
      "Winter" = "lightskyblue1",
      "Spring" = "chartreuse3",
      "Summer" = "gold2",
      "Fall" = "lightsalmon4"
    )
  ) +
  labs(
    x = "Month",
    y = "Average high temperature (F)",
    title = "Durham climate",
    fill = "Season"
  ) +
  theme_minimal() +
  theme(legend.position = "top") 
```
:::

::: {.column width="50%"}
```{r}
#| echo: false

durham_climate 
  

```
:::
:::

## The Code...{.smaller}

Take a look at the printout! What does each highlighted portion do?

```{r}
#| echo: false

durham_climate |>
  mutate( season = case_when(
      month %in% c("December", "January", "February") ~ "Winter",
      month %in% c("March", "April", "May") ~ "Spring",
      month %in% c("June", "July", "August") ~ "Summer",
      month %in% c("September", "October", "November") ~ "Fall",)
    ) |>
  mutate(season = fct_relevel(season, "Winter", "Spring", "Summer", "Fall")) |> 
  ggplot(aes(x = month, y = avg_high_f, group = 1, fill = season)) +
    geom_line() +
    geom_point(shape = "circle filled", size = 3, stroke = 1) +
    scale_fill_manual(
      values = c(
        "Winter" = "lightskyblue1",
        "Spring" = "chartreuse3",
        "Summer" = "gold2",
        "Fall" = "lightsalmon4"
      )
    ) +
    labs(
      x = "Month",
      y = "Average high temperature (F)",
      title = "Durham climate",
      fill = "Season"
    ) +
    theme_minimal() +
    theme(legend.position = "top") 
```

## Task 2: High/Low lines

```{r}
#| echo: false 
durham_climate |>
  mutate(
    month = fct_relevel(month, month.name),
    season = case_when(
      month %in% c("December", "January", "February") ~ "Winter",
      month %in% c("March", "April", "May") ~ "Spring",
      month %in% c("June", "July", "August") ~ "Summer",
      month %in% c("September", "October", "November") ~ "Fall",
    ),
    season = fct_relevel(season, "Winter", "Spring", "Summer", "Fall")
  ) |>
  pivot_longer(
    cols = c(avg_high_f, avg_low_f),
    names_to = "temp_type",
    values_to = "avg_temp_f"
  ) |>
  ggplot(aes(x = month, y = avg_temp_f, group = temp_type, color = temp_type, fill = season)) +
  geom_line() +
  geom_point(shape = "circle filled", size = 3, stroke = 1) +
  scale_fill_manual(
    values = c(
      "Winter" = "lightskyblue1",
      "Spring" = "chartreuse3",
      "Summer" = "gold2",
      "Fall" = "lightsalmon4"
    )
  ) +
  scale_color_manual(
    values = c(
      "avg_high_f" = "gray20",
      "avg_low_f" = "gray70"
    )
  ) +
  labs(
    x = "Month",
    y = "Average temperature (F)",
    title = "Durham climate",
    fill = "Season",
    color = "Type"
  ) +
  theme_minimal() +
  theme(legend.position = "top")
```

## Task 2: High/Low lines{.smaller}
```{r}
#| echo: false 
#| fig-height: 3.2
durham_climate |>
  mutate(
    month = fct_relevel(month, month.name),
    season = case_when(
      month %in% c("December", "January", "February") ~ "Winter",
      month %in% c("March", "April", "May") ~ "Spring",
      month %in% c("June", "July", "August") ~ "Summer",
      month %in% c("September", "October", "November") ~ "Fall",
    ),
    season = fct_relevel(season, "Winter", "Spring", "Summer", "Fall")
  ) |>
  pivot_longer(
    cols = c(avg_high_f, avg_low_f),
    names_to = "temp_type",
    values_to = "temp"
  ) |>
  ggplot(aes(x = month, y = temp, group = temp_type, color = temp_type, fill = season)) +
  geom_line() +
  geom_point(shape = "circle filled", size = 3, stroke = 1) +
  scale_fill_manual(
    values = c(
      "Winter" = "lightskyblue1",
      "Spring" = "chartreuse3",
      "Summer" = "gold2",
      "Fall" = "lightsalmon4"
    )
  ) +
  scale_color_manual(
    values = c(
      "avg_high_f" = "gray20",
      "avg_low_f" = "gray70"
    )
  ) +
  labs(
    x = "Month",
    y = "Average temperature (F)",
    title = "Durham climate",
    fill = "Season",
    color = "Type"
  ) +
  theme_minimal() +
  theme(legend.position = "top")
```

```{r}
#| echo: false 
durham_climate |>
  mutate(
    month = fct_relevel(month, month.name),
    season = case_when(
      month %in% c("December", "January", "February") ~ "Winter",
      month %in% c("March", "April", "May") ~ "Spring",
      month %in% c("June", "July", "August") ~ "Summer",
      month %in% c("September", "October", "November") ~ "Fall",
    ),
    season = fct_relevel(season, "Winter", "Spring", "Summer", "Fall")
  ) |>
  head(3)
```

## Task 2: Goal - Pivot!!! {.smaller}

```{r}
#| echo: false 
durham_climate |>
  mutate(
    month = fct_relevel(month, month.name),
    season = case_when(
      month %in% c("December", "January", "February") ~ "Winter",
      month %in% c("March", "April", "May") ~ "Spring",
      month %in% c("June", "July", "August") ~ "Summer",
      month %in% c("September", "October", "November") ~ "Fall",
    ),
    season = fct_relevel(season, "Winter", "Spring", "Summer", "Fall")
  ) |>
  slice(1:5)

```

<br> 

```{r}
#| echo: false 
durham_climate |>
  mutate(
    month = fct_relevel(month, month.name),
    season = case_when(
      month %in% c("December", "January", "February") ~ "Winter",
      month %in% c("March", "April", "May") ~ "Spring",
      month %in% c("June", "July", "August") ~ "Summer",
      month %in% c("September", "October", "November") ~ "Fall",
    ),
    season = fct_relevel(season, "Winter", "Spring", "Summer", "Fall")
  ) |>
  pivot_longer(
    cols = c(avg_high_f, avg_low_f),
    names_to = "temp_type",
    values_to = "temp"
  ) |>
  slice(1:5)
```

## Task 2: Goal - Pivot!!! {.smaller}

Add your pivot code to today's AE. Check out the plotting code! What is going on?


## Task 3: Transform Sales Data 
I will show code here; follow along in your AE!
