---
title: "Quantifying uncertainty with bootstrap intervals"
subtitle: "Lecture 20"
date: "2025-6-12"
format: 
  revealjs:
    output-file: 20-bootstrap-slides.html
    pdf-separate-fragments: true
auto-stretch: false
---

## Announcements {.smaller}

Project timeline and progress:

::: incremental
-   **Due TONIGHT: Milestone 3**
    -   Address and close issues (let me know if you are having trouble closing!)
    -   At least one plot
    -   All team members commit
-   **Before Monday - Between Milestones 3 and 4**
    -   Make real progress on your project write-up: introduction and exploratory data analysis; brainstorm of methods you plan to use
    -   Ideal: Start trying the methods!
-   **On Monday - Milestone 4**
    -   First 30 mins: talk/work as teams
    -   Last 45 mins: give feedback to another team!
:::

```{r}
#| label: load-packages
#| message: false
#| echo: false
#| include: false

library(tidyverse)
library(tidymodels)
library(openintro)
library(scales)      # for pretty axis labels
library(glue)        # for constructing character strings
library(knitr)       # for neatly formatted tables
set.seed(56)
```

```{r}
#| message: false
#| echo: false
#| include: false


df <- loans_full_schema |>
  drop_na(annual_income, total_credit_utilized) |>
  filter(log(annual_income) > 0) |>
  filter(log(total_credit_utilized) > 0) |>
  mutate(x = log(annual_income), y = log(total_credit_utilized)) |>
  select(x, y)
```

# Yesterday was a lot...

Quick Recap!

## Confusion Matrix {.smaller}

::: columns
::: {.column width="40%"}
![](images/c_m.png)
:::

::: {.column width="60%"}
::: incremental
-   False negative rate = $\frac{FN}{FN + TP}$
-   False positive rate = $\frac{FP}{FP + TN}$
-   Sensitivity = $\frac{FN}{FN + TP}$ = 1 âˆ’ False negative rate
-   Specificity = $\frac{TN}{FP + TN}$ = 1 - False positive rate
:::
:::
:::

## ROC Curve

![](images/20/roc-curve-annotated.png)

# Quantifying uncertainty

## Samples {.smaller}

Generally, we don't have information about an entire population, we have data for a sample:

::: incremental
-   Election polling: we can't ask everybody who they are voting for

-   Housing data: we don't have a data set with every single house

-   Medical research: we don't test a new drug on everyone, just on a sample of patients in a clinical trial.

-   Ecology studies: scientists might analyze a smaller sample of animals/plants
:::

. . .

There is uncertainty about true population parameters.

## Statistical inference {.smaller}

::: incremental
-   **Statistical inference** provide methods and tools so we can use the single observed sample to make valid statements (inferences) about the population it comes from

-   For our inferences to be valid, **the sample should be random** and representative of the population we're interested in
:::

## Example - Means {.smaller}

Suppose this histogram represents some value $x$ in a population of 10,000:

```{r}
#| echo: false
#| warning: false
#| message: false

set.seed(90)
df <- df |> mutate(x = rnorm(9947, mean = 55, sd = 5))

df |>
  ggplot(aes(x = x)) +
  geom_histogram() 
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::

## Example - Means (Sample Size 2) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df_sample = df |> sample_n(2) 

set.seed(50)
df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 1) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 2) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(40)
df_sample = df |> sample_n(2) 

df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 1) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 2) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(30)

df_sample = df |> sample_n(2) 


df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 1) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 2) {.smaller}

::: columns
::: {.column width="50% "}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(10)
df_sample = df |> sample_n(2) 

df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 1) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 2) {.smaller}

::: columns
::: {.column width="50% "}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(17)
df_sample = df |> sample_n(2) 

df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 1) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 10) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(88)

df_sample = df |> sample_n(10) 


df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 2) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 10) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(78)
df_sample = df |> sample_n(10) 

df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 2) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 10) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(30)

df_sample = df |> sample_n(10) 


df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 2) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 10) {.smaller}

::: columns
::: {.column width="50% "}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(2)
df_sample = df |> sample_n(10) 

df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 2) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 10) {.smaller}

::: columns
::: {.column width="50% "}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(17)
df_sample = df |> sample_n(10) 

df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 2) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 100) {.smaller}

::: columns
::: {.column width="50% "}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(17)
df_sample = df |> sample_n(100) 

df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 3) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 100) {.smaller}

::: columns
::: {.column width="50% "}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

#set.seed(17)
df_sample = df |> sample_n(100) 

df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 3) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 100) {.smaller}

::: columns
::: {.column width="50% "}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

#set.seed(17)
df_sample = df |> sample_n(100) 

df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 3) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 100) {.smaller}

::: columns
::: {.column width="50% "}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

#set.seed(17)
df_sample = df |> sample_n(100) 

df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 3) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 100) {.smaller}

::: columns
::: {.column width="50% "}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

#set.seed(17)
df_sample = df |> sample_n(100) 

df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 3) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 100) {.smaller}

::: columns
::: {.column width="50% "}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

#set.seed(17)
df_sample = df |> sample_n(100) 

df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 3) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 100) {.smaller}

::: columns
::: {.column width="50% "}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(102)
df_sample = df |> sample_n(100) 

df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 1) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 1000) {.smaller}

::: columns
::: {.column width="50% "}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(102)
df_sample = df |> sample_n(1000) 

df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 1) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 1000) {.smaller}

::: columns
::: {.column width="50% "}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(104)
df_sample = df |> sample_n(1000) 

df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 1) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means (Sample Size 1000) {.smaller}

::: columns
::: {.column width="50% "}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  xlim(min(df$x), max(df$x))+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df$x), 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(103)
df_sample = df |> sample_n(1000) 

df_sample |>
  ggplot(aes(x = x)) +
  geom_histogram(binwidth = 1) +
  xlim(min(df$x) - 1 , max(df$x) + 1)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Mean: </strong>`r round(mean(df_sample$x), 2)`
:::
:::
:::

## Example - Means {.smaller}

How confident would you feel stating that the population mean is equal to any of these values?

## Example - Slopes {.smaller}

Suppose this scatter plot represents some values $x, y$ in a population of 10,000:

```{r}
#| echo: false
#| warning: false
#| message: false

set.seed(90)
df <- loans_full_schema |>
  drop_na(annual_income, total_credit_utilized) |>
  filter(log(annual_income) > 0) |>
  filter(log(total_credit_utilized) > 0) |>
  mutate(x = log(annual_income), y = log(total_credit_utilized)) |>
  select(x, y)

df |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)

slope = lm(y ~ x, data = df)$coefficients[2]
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(slope, 2)`
:::

## Example - Slopes (Sample Size 2) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(slope, 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(10)
df_sample = df |> sample_n(2) 

df_sample |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )


sample_slope = lm(y ~ x, data = df_sample)$coefficients[2]
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(sample_slope, 2)`
:::
:::
:::

## Example - Slopes (Sample Size 2) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(slope, 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(18)
df_sample = df |> sample_n(2) 

df_sample |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )

sample_slope = lm(y ~ x, data = df_sample)$coefficients[2]
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(sample_slope, 2)`
:::
:::
:::

## Example - Slopes (Sample Size 2) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(slope, 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(2)
df_sample = df |> sample_n(2) 

df_sample |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )

sample_slope = lm(y ~ x, data = df_sample)$coefficients[2]
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(sample_slope, 2)`
:::
:::
:::

## Example - Slopes (Sample Size 2) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(slope, 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(19)
df_sample = df |> sample_n(2) 

df_sample |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )

sample_slope = lm(y ~ x, data = df_sample)$coefficients[2]
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(sample_slope, 2)`
:::
:::
:::

## Example - Slopes (Sample Size 10) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(slope, 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(10)
df_sample = df |> sample_n(10) 

df_sample |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )


sample_slope = lm(y ~ x, data = df_sample)$coefficients[2]
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(sample_slope, 2)`
:::
:::
:::

## Example - Slopes (Sample Size 10) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(slope, 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(40)
df_sample = df |> sample_n(10) 

df_sample |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )


sample_slope = lm(y ~ x, data = df_sample)$coefficients[2]
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(sample_slope, 2)`
:::
:::
:::

## Example - Slopes (Sample Size 10) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(slope, 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(90)
df_sample = df |> sample_n(10) 

df_sample |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )


sample_slope = lm(y ~ x, data = df_sample)$coefficients[2]
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(sample_slope, 2)`
:::
:::
:::

## Example - Slopes (Sample Size 10) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(slope, 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(70)
df_sample = df |> sample_n(10) 

df_sample |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )


sample_slope = lm(y ~ x, data = df_sample)$coefficients[2]
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(sample_slope, 2)`
:::
:::
:::

## Example - Slopes (Sample Size 100) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(slope, 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(14)
df_sample = df |> sample_n(100) 

df_sample |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )


sample_slope = lm(y ~ x, data = df_sample)$coefficients[2]
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(sample_slope, 2)`
:::
:::
:::

## Example - Slopes (Sample Size 100) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(slope, 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(90)
df_sample = df |> sample_n(100) 

df_sample |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )


sample_slope = lm(y ~ x, data = df_sample)$coefficients[2]
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(sample_slope, 2)`
:::
:::
:::

## Example - Slopes (Sample Size 100) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(slope, 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(13)
df_sample = df |> sample_n(100) 

df_sample |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )


sample_slope = lm(y ~ x, data = df_sample)$coefficients[2]
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(sample_slope, 2)`
:::
:::
:::

## Example - Slopes (Sample Size 100) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(slope, 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(12)
df_sample = df |> sample_n(100) 

df_sample |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )


sample_slope = lm(y ~ x, data = df_sample)$coefficients[2]
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(sample_slope, 2)`
:::
:::
:::

## Example - Slopes (Sample Size 100) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(slope, 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(11)
df_sample = df |> sample_n(100) 

df_sample |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )


sample_slope = lm(y ~ x, data = df_sample)$coefficients[2]
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(sample_slope, 2)`
:::
:::
:::

## Example - Slopes (Sample Size 1000) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(slope, 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(11)
df_sample = df |> sample_n(1000) 

df_sample |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )


sample_slope = lm(y ~ x, data = df_sample)$coefficients[2]
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(sample_slope, 2)`
:::
:::
:::

## Example - Slopes (Sample Size 1000) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(slope, 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(12)
df_sample = df |> sample_n(1000) 

df_sample |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )


sample_slope = lm(y ~ x, data = df_sample)$coefficients[2]
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(sample_slope, 2)`
:::
:::
:::

## Example - Slopes (Sample Size 1000) {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

df |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(slope, 2)`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-asp: 0.7

set.seed(13)
df_sample = df |> sample_n(1000) 

df_sample |>
  ggplot(aes(x = x, y = y)) +
  geom_point() + 
  xlim(7, 15) + 
  ylim(0, 15) +
  geom_smooth(method = "lm", se = FALSE)+
  theme(
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    axis.text.x  = element_text(size = 14),
    axis.text.y  = element_text(size = 14)
  )


sample_slope = lm(y ~ x, data = df_sample)$coefficients[2]
```

::: {style="text-align: center;"}
<strong>Slope: </strong>`r round(sample_slope, 2)`
:::
:::
:::

## Example - Slopes {.smaller}

How confident would you feel stating that the population slope is equal to any of these values?s

## The Vision {.smaller}

How can we give a range of reasonable values for the population data using the sample data we have??

::: incremental
-   ***Idea***: use the sample to take more samples???

-   ***Method***: bootstrapping!
:::

## Bootstrapping

![](images/bootstrap/1.png){fig-align="center"}

## Bootstrapping

![](images/bootstrap/2.png){fig-align="center"}

## Bootstrapping

![](images/bootstrap/3.png){fig-align="center"}

## Bootstrapping

![](images/bootstrap/4.png){fig-align="center"}

## Bootstrapping

![](images/bootstrap/5.png){fig-align="center"}

## Bootstrapping

![](images/bootstrap/6.png){fig-align="center"}

## Bootstrapping

![](images/bootstrap/7.png){fig-align="center"}

## Today's Goal {.smaller}

Find range of plausible values for a slope using bootstrap confidence intervals.

## Data: Houses in Duke Forest {.smaller}

::: columns
::: {.column width="50%"}
-   Data on houses that were sold in the Duke Forest neighborhood of Durham, NC around November 2020
-   Pulled from Zillow
-   Source: [`openintro::duke_forest`](http://openintrostat.github.io/openintro/reference/duke_forest.html)
:::

::: {.column width="50%"}
![](images/21/duke_forest_home.jpg){fig-alt="Home in Duke Forest"}
:::
:::

. . .

**Goal**: Use the area (in square feet) to understand variability in the price of houses in Duke Forest.

## Exploratory data analysis

```{r}
#| code-fold: true
ggplot(duke_forest, aes(x = area, y = price)) +
  geom_point(alpha = 0.7) +
  labs(
    x = "Area (square feet)",
    y = "Sale price (USD)",
    title = "Price and area of houses in Duke Forest"
  ) +
  scale_y_continuous(labels = label_dollar()) 
```

## Modeling {.smaller}

```{r}
#| echo: true

df_fit <- linear_reg() |>
  fit(price ~ area, data = duke_forest)

tidy(df_fit) 
```

. . .

```{r}
#| echo: false
intercept <- tidy(df_fit) |> filter(term == "(Intercept)") |> pull(estimate) |> round()
slope <- tidy(df_fit) |> filter(term == "area") |> pull(estimate) |> round()
```

::: incremental
-   **Intercept:** Duke Forest houses that are 0 square feet are expected to sell, for `r dollar(intercept)`, on average.

-   **Slope:** For each additional square foot, we expect the sale price of Duke Forest houses to be higher by `r dollar(slope)`, on average.
:::

## From sample to population {.smaller}

> For each additional square foot, we expect the sale price of Duke Forest houses to be higher by `r dollar(slope)`, on average.

<br>

::: incremental
-   This estimate is valid for the single sample of `r nrow(duke_forest)` houses.
-   But what if we're not interested quantifying the relationship between the size and price of a house in this single sample?
-   What if we want to say something about the relationship between these variables for all houses in Duke Forest?
:::

## Inference for simple linear regression

-   Calculate a confidence interval for the slope, $\beta_1$ (today)

-   Conduct a hypothesis test for the slope,$\beta_1$ (next week)

# Confidence interval for the slope

## Confidence interval {.smaller}

::: incremental
-   A plausible range of values for a population parameter is called a **confidence interval**
-   Using only a single point estimate is like fishing in a murky lake with a spear. Using a confidence interval is like fishing with a net.
    -   We can throw a spear where we saw a fish but we will probably miss. If we toss a net in that area, we have a good chance of catching the fish.
    -   If we report a point estimate, we probably will not hit the exact population parameter. If we report a range of plausible values we have a good shot at capturing the parameter
:::

## Confidence interval for the slope {.smaller}

A confidence interval will allow us to make a statement like "*For each additional square foot, the model predicts the sale price of Duke Forest houses to be higher, on average, by `r dollar(slope)`, plus or minus X dollars.*"

. . .

-   Should X be \$10?
    \$100?
    \$1000?

-   If we were to take another sample of `r nrow(duke_forest)` would we expect the slope calculated based on that sample to be exactly `r dollar(slope)`?
    Off by \$10?
    \$100?
    \$1000?

. . .

-   The answer depends on how variable (from one sample to another sample) the sample statistic (the slope) is

. . .

-   We need a way to quantify the variability of the sample statistic

## Quantify the variability of the slope {.smaller}

::: incremental
-   Two approaches:
    1.  Via simulation (what we'll do in this course)
    2.  Via mathematical models (what you can learn about in future courses)
:::

## Quantify the variability of the slope {.smaller}

**Bootstrapping** to quantify the variability of the slope for the purpose of estimation:

::: incremental
-   Bootstrap new samples from the original sample
-   Fit models to each of the samples and estimate the slope
-   Use features of the distribution of the bootstrapped slopes to construct a confidence interval
:::

```{r}
#| echo: false
set.seed(119)

df_boot_samples_5 <- duke_forest |>
  specify(price ~ area) |>
  generate(reps = 5, type = "bootstrap")
```

## Bootstrap sample 1

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"
#| message: false
p_df_obs <- ggplot(duke_forest, aes(x = area, y = price)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "#8F2D56") +
  labs(
    x = "Area (square feet)",
    y = "Sale price (USD)",
    title = "Price and area of houses in Duke Forest"
  ) +
  scale_y_continuous(limits = c(90000, 1550000), labels = label_dollar()) +
  scale_x_continuous(limits = c(1000, 6500), labels = label_number())

p_df_obs
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"
#| message: false
replicate_no = 1

ggplot(df_boot_samples_5 |> filter(replicate == replicate_no), 
       aes(x = area, y = price)) +
  geom_point(alpha = 0.5) +
  geom_line(stat = "smooth", method = "lm", se = FALSE, alpha = 0.8) +
  labs(
    x = "Area (square feet)",
    y = "Sale price (USD)",
    title = glue("Bootstrap sample {replicate_no}")
  ) +
  scale_y_continuous(limits = c(90000, 1550000), labels = label_dollar()) +
  scale_x_continuous(limits = c(1000, 6500), labels = label_number())
```
:::
:::

## Bootstrap sample 2

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"
#| message: false
p_df_obs
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"
#| message: false
replicate_no = 2

ggplot(df_boot_samples_5 |> filter(replicate == replicate_no), 
       aes(x = area, y = price)) +
  geom_point(alpha = 0.5) +
  geom_line(stat = "smooth", method = "lm", se = FALSE, alpha = 0.8) +
  labs(
    x = "Area (square feet)",
    y = "Sale price (USD)",
    title = glue("Bootstrap sample {replicate_no}")
  ) +
  scale_y_continuous(limits = c(90000, 1550000), labels = label_dollar()) +
  scale_x_continuous(limits = c(1000, 6500), labels = label_number())
```
:::
:::

## Bootstrap sample 3

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"
#| message: false
p_df_obs
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"
#| message: false
replicate_no = 3

ggplot(df_boot_samples_5 |> filter(replicate == replicate_no), 
       aes(x = area, y = price)) +
  geom_point(alpha = 0.5) +
  geom_line(stat = "smooth", method = "lm", se = FALSE, alpha = 0.8) +
  labs(
    x = "Area (square feet)",
    y = "Sale price (USD)",
    title = glue("Bootstrap sample {replicate_no}")
  ) +
  scale_y_continuous(limits = c(90000, 1550000), labels = label_dollar()) +
  scale_x_continuous(limits = c(1000, 6500), labels = label_number())
```
:::
:::

## Bootstrap sample 4

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"
#| message: false
p_df_obs
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"
#| message: false
replicate_no = 4

ggplot(df_boot_samples_5 |> filter(replicate == replicate_no), 
       aes(x = area, y = price)) +
  geom_point(alpha = 0.5) +
  geom_line(stat = "smooth", method = "lm", se = FALSE, alpha = 0.8) +
  labs(
    x = "Area (square feet)",
    y = "Sale price (USD)",
    title = glue("Bootstrap sample {replicate_no}")
  ) +
  scale_y_continuous(limits = c(90000, 1550000), labels = label_dollar()) +
  scale_x_continuous(limits = c(1000, 6500), labels = label_number())
```
:::
:::

## Bootstrap sample 5

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"
#| message: false
p_df_obs
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"
#| message: false
replicate_no = 5

ggplot(df_boot_samples_5 |> filter(replicate == replicate_no), 
       aes(x = area, y = price)) +
  geom_point(alpha = 0.5) +
  geom_line(stat = "smooth", method = "lm", se = FALSE, alpha = 0.8) +
  labs(
    x = "Area (square feet)",
    y = "Sale price (USD)",
    title = glue("Bootstrap sample {replicate_no}")
  ) +
  scale_y_continuous(limits = c(90000, 1550000), labels = label_dollar()) +
  scale_x_continuous(limits = c(1000, 6500), labels = label_number())
```
:::
:::

. . .

*so on and so forth...*

## Bootstrap samples 1 - 5

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"
#| message: false
p_df_obs
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"
#| message: false
ggplot(df_boot_samples_5, aes(x = area, y = price, group = replicate)) +
  geom_line(stat = "smooth", method = "lm", se = FALSE, alpha = 0.5) +
  labs(
    x = "Area (square feet)",
    y = "Sale price (USD)",
    title = glue("Bootstrap samples 1 - 5")
  ) +
  scale_y_continuous(limits = c(90000, 1550000), labels = label_dollar()) +
  scale_x_continuous(limits = c(1000, 6500), labels = label_number())
```
:::
:::

## Bootstrap samples 1 - 100

```{r}
#| echo: false
#| message: false
set.seed(119)

df_boot_samples_100 <- duke_forest |>
  specify(price ~ area) |>
  generate(reps = 100, type = "bootstrap")
```

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"
#| message: false
p_df_obs
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"
#| message: false
p_df_boot_samples_100 <- ggplot(df_boot_samples_100, aes(x = area, y = price, group = replicate)) +
  geom_line(stat = "smooth", method = "lm", se = FALSE, alpha = 0.05) +
  labs(
    x = "Area (square feet)",
    y = "Sale price (USD)",
    title = glue("Bootstrap samples 1 - 100")
  ) +
  scale_y_continuous(limits = c(90000, 1550000), labels = label_dollar()) +
  scale_x_continuous(limits = c(1000, 6500), labels = label_number())

p_df_boot_samples_100
```
:::
:::

## Slopes of bootstrap samples {.smaller}

**Fill in the blank:** For each additional square foot, the model predicts the sale price of Duke Forest houses to be higher, on average, by `r dollar(slope)`, plus or minus \_\_\_ dollars.

```{r}
#| echo: false
#| message: false
p_df_boot_samples_100 +
  geom_abline(intercept = intercept, slope = slope, color = "#8F2D56")
```

## Slopes of bootstrap samples {.smaller}

**Fill in the blank:** For each additional square foot, we expect the sale price of Duke Forest houses to be higher, on average, by `r dollar(slope)`, plus or minus \_\_\_ dollars.

```{r}
#| echo: false
df_boot_samples_100_fit <- df_boot_samples_100 |>
  fit()

df_boot_samples_100_hist <- ggplot(df_boot_samples_100_fit |> filter(term == "area"), aes(x = estimate)) +
  geom_histogram(binwidth = 10, color = "white") +
  geom_vline(xintercept = slope, color = "#8F2D56", linewidth = 1) +
  labs(x = "Slope", y = "Count",
       title = "Slopes of 100 bootstrap samples") +
  scale_x_continuous(labels = label_dollar())

df_boot_samples_100_hist
```

## Confidence level {.smaller}

How confident are you that the true slope is between \$0 and \$250?
How about \$150 and \$170?
How about \$90 and \$210?

```{r}
#| echo: false
df_boot_samples_100_hist
```

## 95% confidence interval {.xsmall}

```{r}
#| echo: false
#| warning: false
lower <- df_boot_samples_100_fit |>
  ungroup() |>
  filter(term == "area") |>
  summarise(quantile(estimate, 0.025)) |>
  pull()

upper <- df_boot_samples_100_fit |>
  ungroup() |>
  filter(term == "area") |>
  summarise(quantile(estimate, 0.975)) |>
  pull()

df_boot_samples_100_hist +
  geom_vline(xintercept = lower, color = "steelblue", size = 1, linetype = "dashed") +
  geom_vline(xintercept = upper, color = "steelblue", size = 1, linetype = "dashed")
```

::: incremental
-   A 95% confidence interval is bounded by the middle 95% of the bootstrap distribution
-   We are 95% confident that for each additional square foot, the model predicts the sale price of Duke Forest houses to be higher, on average, by `r dollar(lower)` to `r dollar(upper)`.
:::

# Application exercise

## Calculate observed fit {.smaller}

Calculate the observed slope:

```{r}
#| echo: true

observed_fit <- duke_forest |>
  specify(price ~ area) |>
  fit()

observed_fit
```

## Take bootstrap samples {.smaller}

Take `100` bootstrap samples and fit models to each one:

```{r}
#| echo: true

set.seed(1234)
n = 100

boot_fits <- duke_forest |>
  specify(price ~ area) |>
  generate(reps = n, type = "bootstrap") |>
  fit()

boot_fits
```

## Examine bootstrap samples {.smaller}

```{r}
#| warning: false
boot_fits |>
  filter(term == "area") |>
  ggplot(aes(x = estimate)) +
  geom_histogram()
```

## Computing the CI for the slope III {.smaller}

**Percentile method:** Compute the 95% CI as the middle 95% of the bootstrap distribution:

```{r}
#| echo: true

get_confidence_interval(
  boot_fits, 
  point_estimate = observed_fit, 
  level = 0.95,
  type = "percentile" 
)
```

## Precision vs. accuracy {.smaller}

::: task
If we want to be very certain that we capture the population parameter, should we use a wider or a narrower interval?
What drawbacks are associated with using a wider interval?
:::

. . .

![](images/21/garfield.png)

## Precision vs. accuracy {.smaller}

::: task
How can we get best of both worlds -- high precision and high accuracy?
:::

## Changing confidence level {.smaller}

::: task
How would you modify the following code to calculate a 90% confidence interval?
How would you modify it for a 99% confidence interval?
:::

```{r}
#| echo: true

get_confidence_interval(
  boot_fits, 
  point_estimate = observed_fit, 
  level = 0.95,
  type = "percentile"
)
```

## Changing confidence level {.smaller}

```{r}
#| echo: true

## confidence level: 90%
get_confidence_interval(
  boot_fits, point_estimate = observed_fit, 
  level = 0.90, type = "percentile"
)

## confidence level: 99%
get_confidence_interval(
  boot_fits, point_estimate = observed_fit, 
  level = 0.99, type = "percentile"
)
```

## Recap {.xsmall}

::: incremental
-   **Population:** Complete set of observations of whatever we are studying, e.g., people, tweets, photographs, etc. (population size = $N$)

-   **Sample:** Subset of the population, ideally random and representative (sample size = $n$)

-   Sample statistic $\ne$ population parameter, but if the sample is good, it can be a good estimate

-   **Statistical inference:** Discipline that concerns itself with extracting meaning and information from data that has been generated by random process

-   We report the estimate with a confidence interva.
    The width of this interval depends on the variability of sample statistics from different samples from the population

-   Since we can't continue sampling from the population, we bootstrap from the one sample we have to estimate sampling variability
:::
